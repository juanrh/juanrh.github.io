digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.options.AbstractOptionHandler\n|# options\l# classOptionNamesToPreparedObjects\l- serialVersionUID\l|+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ getCLICreationString()\l+ copy()\l# prepareForUseImpl()\l# discoverOptionsViaReflection()\l# prepareClassOptions()\l# getPreparedClassOption()\l# getPreparedClassOption()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.AbstractMOAObject\n||+ copy()\l+ measureByteSize()\l+ toString()\l+ copy()\l+ measureByteSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1AbstractMOAObject.html",tooltip="Abstract MOA Object."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node5 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.options.OptionHandler\n||+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ copy()\l+ getCLICreationString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1OptionHandler.html",tooltip="Interface representing an object that handles options or parameters."];
  Node3 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.classifiers.AbstractClassifier\n|+ randomSeedOption\l+ classifierRandom\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l|+ getPurposeString()\l+ AbstractClassifier()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClassifiers()\l+ copy()\l+ correctlyClassifies()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1AbstractClassifier.html",tooltip="Abstract Classifier."];
  Node6 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.classifiers.active.ActiveClassifier\n|+ baseLearnerOption\l+ activeLearningStrategyOption\l+ budgetOption\l+ fixedThresholdOption\l+ stepOption\l+ numInstancesInitOption\l+ classifier\l+ costLabeling\l+ costLabelingRandom\l+ iterationControl\l+ newThreshold\l+ maxPosterior\l+ accuracyBaseLearner\l- outPosterior\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l# getModelMeasurementsImpl()\l- getMaxPosterior()\l- labelRandom()\l- labelFixed()\l- labelVar()\l- labelSelSampling()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1active_1_1ActiveClassifier.html",tooltip="Active learning setting for evolving data streams."];
  Node6 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.classifiers.bayes.NaiveBayes\n|# observedClassDistribution\l# attributeObservers\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ isRandomizable()\l+ manageMemory()\l+ doNaiveBayesPrediction()\l+ doNaiveBayesPredictionLog()\l# getModelMeasurementsImpl()\l# newNominalClassObserver()\l# newNumericClassObserver()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1bayes_1_1NaiveBayes.html",tooltip="Naive Bayes incremental learner."];
  Node6 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.classifiers.bayes.NaiveBayesMultinomial\n|+ laplaceCorrectionOption\l# m_classTotals\l# m_headerInfo\l# m_numClasses\l# m_probOfClass\l# m_wordTotalForClass\l# reset\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ totalSize()\l+ getModelDescription()\l+ isRandomizable()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1bayes_1_1NaiveBayesMultinomial.html",tooltip="Class for building and using a multinomial Naive Bayes classifier."];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.classifiers.core.attributeclassobservers.BinaryTreeNumericAttributeClassObserver\n|+ root\l- serialVersionUID\l|+ observeAttributeClass()\l+ probabilityOfAttributeValueGivenClass()\l+ getBestEvaluatedSplitSuggestion()\l+ getDescription()\l+ observeAttributeTarget()\l# searchForBestSplitOption()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1attributeclassobservers_1_1BinaryTreeNumericAttributeClassObserver.html",tooltip="Class for observing the class data distribution for a numeric attribute using a binary..."];
  Node1 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{moa.classifiers.core.attributeclassobservers.BinaryTreeNumericAttributeClassObserverRegression\n|+ root1\l+ serialVersionUID\l|+ observeAttributeTarget()\l+ observeAttributeClass()\l+ probabilityOfAttributeValueGivenClass()\l+ getBestEvaluatedSplitSuggestion()\l+ getDescription()\l# searchForBestSplitOption()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1attributeclassobservers_1_1BinaryTreeNumericAttributeClassObserverRegression.html",tooltip="Class for observing the class data distribution for a numeric attribute using a binary..."];
  Node1 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{moa.classifiers.core.attributeclassobservers.GaussianNumericAttributeClassObserver\n|+ numBinsOption\l# minValueObservedPerClass\l# maxValueObservedPerClass\l# attValDistPerClass\l- serialVersionUID\l|+ observeAttributeClass()\l+ probabilityOfAttributeValueGivenClass()\l+ getBestEvaluatedSplitSuggestion()\l+ getSplitPointSuggestions()\l+ getClassDistsResultingFromBinarySplit()\l+ getDescription()\l+ observeAttributeTarget()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1attributeclassobservers_1_1GaussianNumericAttributeClassObserver.html",tooltip="Class for observing the class data distribution for a numeric attribute using gaussian..."];
  Node1 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{moa.classifiers.core.attributeclassobservers.GreenwaldKhannaNumericAttributeClassObserver\n|+ numTuplesOption\l# attValDistPerClass\l- serialVersionUID\l|+ observeAttributeClass()\l+ probabilityOfAttributeValueGivenClass()\l+ getBestEvaluatedSplitSuggestion()\l+ getClassDistsResultingFromBinarySplit()\l+ getDescription()\l+ observeAttributeTarget()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1attributeclassobservers_1_1GreenwaldKhannaNumericAttributeClassObserver.html",tooltip="Class for observing the class data distribution for a numeric attribute using Greenwald..."];
  Node1 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{moa.classifiers.core.attributeclassobservers.NominalAttributeClassObserver\n|+ attValDistPerClass\l# totalWeightObserved\l# missingWeightObserved\l- serialVersionUID\l|+ observeAttributeClass()\l+ probabilityOfAttributeValueGivenClass()\l+ totalWeightOfClassObservations()\l+ weightOfObservedMissingValues()\l+ getBestEvaluatedSplitSuggestion()\l+ getMaxAttValsObserved()\l+ getClassDistsResultingFromMultiwaySplit()\l+ getClassDistsResultingFromBinarySplit()\l+ getDescription()\l+ observeAttributeTarget()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1attributeclassobservers_1_1NominalAttributeClassObserver.html",tooltip="Class for observing the class data distribution for a nominal attribute."];
  Node1 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{moa.classifiers.core.attributeclassobservers.NullAttributeClassObserver\n|- serialVersionUID\l|+ observeAttributeClass()\l+ probabilityOfAttributeValueGivenClass()\l+ totalWeightOfClassObservations()\l+ weightOfObservedMissingValues()\l+ getDescription()\l+ getBestEvaluatedSplitSuggestion()\l+ observeAttributeTarget()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1attributeclassobservers_1_1NullAttributeClassObserver.html",tooltip="Class for observing the class data distribution for a null attribute."];
  Node1 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{moa.classifiers.core.attributeclassobservers.VFMLNumericAttributeClassObserver\n|+ numBinsOption\l# binList\l- serialVersionUID\l|+ observeAttributeTarget()\l+ observeAttributeClass()\l+ probabilityOfAttributeValueGivenClass()\l+ getBestEvaluatedSplitSuggestion()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1attributeclassobservers_1_1VFMLNumericAttributeClassObserver.html",tooltip="Class for observing the class data distribution for a numeric attribute as in VFML..."];
  Node1 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 [label="{moa.classifiers.core.driftdetection.AbstractChangeDetector\n|# isChangeDetected\l# isWarningZone\l# estimation\l# delay\l# isInitialized\l|+ resetLearning()\l+ input()\l+ getChange()\l+ getWarningZone()\l+ getEstimation()\l+ getDelay()\l+ getOutput()\l+ getDescription()\l+ copy()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1AbstractChangeDetector.html",tooltip="Abstract Change Detector."];
  Node1 -> Node18 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node18 [label="{moa.classifiers.core.splitcriteria.GiniSplitCriterion\n|- serialVersionUID\l|+ getMeritOfSplit()\l+ getRangeOfMerit()\l+ getDescription()\l+ computeGini()\l+ computeGini()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1splitcriteria_1_1GiniSplitCriterion.html",tooltip="Class for computing splitting criteria using Gini with respect to distributions of..."];
  Node1 -> Node19 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node19 [label="{moa.classifiers.core.splitcriteria.InfoGainSplitCriterion\n|+ minBranchFracOption\l- serialVersionUID\l|+ getMeritOfSplit()\l+ getRangeOfMerit()\l+ getDescription()\l+ computeEntropy()\l+ computeEntropy()\l+ numSubsetsGreaterThanFrac()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1splitcriteria_1_1InfoGainSplitCriterion.html",tooltip="Class for computing splitting criteria using information gain with respect to distributions..."];
  Node1 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node20 [label="{moa.classifiers.core.splitcriteria.VarianceReductionSplitCriterion\n|- serialVersionUID\l|+ getMeritOfSplit()\l+ getRangeOfMerit()\l+ getDescription()\l+ computeSD()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1splitcriteria_1_1VarianceReductionSplitCriterion.html"];
  Node1 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node21 [label="{moa.clusterers.AbstractClusterer\n|+ evaluateMicroClusteringOption\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l# randomSeedOption\l# clustererRandom\l# clustering\l|+ getPurposeString()\l+ AbstractClusterer()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClusterers()\l+ copy()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ implementsMicroClusterer()\l+ keepClassLabel()\l+ getMicroClusteringResult()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1AbstractClusterer.html"];
  Node1 -> Node22 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node22 [label="{moa.evaluation.EWMAClassificationPerformanceEvaluator\n|+ alphaOption\l# TotalweightObserved\l# weightCorrect\l- serialVersionUID\l|+ reset()\l+ addResult()\l+ getPerformanceMeasurements()\l+ getTotalWeightObserved()\l+ getFractionCorrectlyClassified()\l+ getFractionIncorrectlyClassified()\l+ getDescription()\l+ prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1EWMAClassificationPerformanceEvaluator.html",tooltip="Classification evaluator that updates evaluation results using an Exponential Weighted..."];
  Node1 -> Node23 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node23 [label="{moa.evaluation.FadingFactorClassificationPerformanceEvaluator\n|+ alphaOption\l# TotalweightObserved\l# weightCorrect\l- serialVersionUID\l|+ reset()\l+ addResult()\l+ getPerformanceMeasurements()\l+ getTotalWeightObserved()\l+ getFractionCorrectlyClassified()\l+ getFractionIncorrectlyClassified()\l+ getDescription()\l+ prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1FadingFactorClassificationPerformanceEvaluator.html",tooltip="Classification evaluator that updates evaluation results using a fading factor."];
  Node1 -> Node24 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node24 [label="{moa.evaluation.WindowClassificationPerformanceEvaluator\n|+ widthOption\l# TotalweightObserved\l# weightObserved\l# weightCorrect\l# weightCorrectNoChangeClassifier\l# lastSeenClass\l# columnKappa\l# rowKappa\l# classAccuracy\l# numClasses\l- serialVersionUID\l|+ reset()\l+ reset()\l+ addResult()\l+ getPerformanceMeasurements()\l+ getTotalWeightObserved()\l+ getFractionCorrectlyClassified()\l+ getKappaStatistic()\l+ getKappaTemporalStatistic()\l+ getFractionIncorrectlyClassified()\l+ getDescription()\l+ prepareForUseImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1WindowClassificationPerformanceEvaluator.html",tooltip="Classification evaluator that updates evaluation results using a sliding window."];
  Node1 -> Node25 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node25 [label="{moa.evaluation.WindowRegressionPerformanceEvaluator\n|+ widthOption\l# TotalweightObserved\l# weightObserved\l# squareError\l# averageError\l# numClasses\l- serialVersionUID\l|+ reset()\l+ reset()\l+ addResult()\l+ getPerformanceMeasurements()\l+ getTotalWeightObserved()\l+ getMeanError()\l+ getSquareError()\l+ getDescription()\l+ prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1WindowRegressionPerformanceEvaluator.html",tooltip="Regression evaluator that updates evaluation results using a sliding window."];
  Node1 -> Node26 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node26 [label="{moa.recommender.data.MemRecommenderData\n|~ drm\l|+ getDescription()\l+ getData()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1recommender_1_1data_1_1MemRecommenderData.html"];
  Node1 -> Node27 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node27 [label="{moa.recommender.dataset.impl.FlixsterDataset\n|+ fileOption\l- strLine\l- br\l|+ getPurposeString()\l+ init()\l+ next()\l+ curUserID()\l+ curItemID()\l+ curRating()\l+ toString()\l+ reset()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1recommender_1_1dataset_1_1impl_1_1FlixsterDataset.html"];
  Node1 -> Node28 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node28 [label="{moa.recommender.dataset.impl.JesterDataset\n|+ fileOption\l- strLine\l- br\l|+ getPurposeString()\l+ init()\l+ next()\l+ toString()\l+ curUserID()\l+ curItemID()\l+ curRating()\l+ reset()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1recommender_1_1dataset_1_1impl_1_1JesterDataset.html"];
  Node1 -> Node29 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node29 [label="{moa.recommender.dataset.impl.MovielensDataset\n|+ fileOption\l- strLine\l- br\l|+ getPurposeString()\l+ init()\l+ next()\l+ toString()\l+ curUserID()\l+ curItemID()\l+ curRating()\l+ reset()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1recommender_1_1dataset_1_1impl_1_1MovielensDataset.html"];
  Node1 -> Node30 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node30 [label="{moa.recommender.predictor.BaselinePredictor\n|+ dataOption\l# rp\l|+ getDescription()\l+ predictRating()\l+ getData()\l+ predictRating()\l+ predictRatings()\l+ train()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1recommender_1_1predictor_1_1BaselinePredictor.html",tooltip="A naive algorithm which combines the global mean of all the existing ratings, the..."];
  Node1 -> Node31 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node31 [label="{moa.recommender.predictor.BRISMFPredictor\n|+ featuresOption\l+ lRateOption\l+ rFactorOption\l+ iterationsOption\l+ dataOption\l# rp\l|+ getDescription()\l+ predictRating()\l+ getData()\l+ predictRating()\l+ predictRatings()\l+ train()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1recommender_1_1predictor_1_1BRISMFPredictor.html",tooltip="Implementation of the algorithm described in Scalable Collaborative Filtering Approaches..."];
  Node1 -> Node32 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node32 [label="{moa.streams.ArffFileStream\n|+ arffFileOption\l+ classIndexOption\l# instances\l# fileReader\l# hitEndOfFile\l# lastInstanceRead\l# numInstancesRead\l# fileProgressMonitor\l- serialVersionUID\l|+ getPurposeString()\l+ ArffFileStream()\l+ ArffFileStream()\l+ prepareForUseImpl()\l+ getHeader()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ nextInstance()\l+ isRestartable()\l+ restart()\l+ getDescription()\l# readNextInstanceFromFile()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1ArffFileStream.html",tooltip="Stream reader of ARFF files."];
  Node1 -> Node33 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node33 [label="{moa.streams.clustering.ClusteringStream\n|+ decayHorizonOption\l+ decayThresholdOption\l+ evaluationFrequencyOption\l+ numAttsOption\l|+ getDecayHorizon()\l+ getDecayThreshold()\l+ getEvaluationFrequency()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1clustering_1_1ClusteringStream.html"];
  Node1 -> Node34 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node34 [label="{moa.streams.ConceptDriftRealStream\n|+ streamOption\l+ driftstreamOption\l+ alphaOption\l+ positionOption\l+ widthOption\l+ randomSeedOption\l# inputStream\l# driftStream\l# random\l# numberInstanceStream\l# streamHeader\l# inputInstance\l# driftInstance\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ getHeader()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1ConceptDriftRealStream.html",tooltip="Stream generator that adds concept drift to examples in a stream with different classes..."];
  Node1 -> Node35 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node35 [label="{moa.streams.ConceptDriftStream\n|+ streamOption\l+ driftstreamOption\l+ alphaOption\l+ positionOption\l+ widthOption\l+ randomSeedOption\l# inputStream\l# driftStream\l# random\l# numberInstanceStream\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1ConceptDriftStream.html",tooltip="Stream generator that adds concept drift to examples in a stream."];
  Node1 -> Node36 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node36 [label="{moa.streams.FilteredStream\n|+ streamOption\l+ filtersOption\l# filterChain\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1FilteredStream.html",tooltip="Class for representing a stream that is filtered."];
  Node1 -> Node37 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node37 [label="{moa.streams.filters.AbstractStreamFilter\n|# inputStream\l|+ setInputStream()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ isRestartable()\l+ restart()\l# restartImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1filters_1_1AbstractStreamFilter.html",tooltip="Abstract Stream Filter."];
  Node1 -> Node38 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node38 [label="{moa.streams.generators.AgrawalGenerator\n|+ functionOption\l+ instanceRandomSeedOption\l+ peturbFractionOption\l+ balanceClassesOption\l# streamHeader\l# instanceRandom\l# nextClassShouldBeZero\l# classificationFunctions\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l# perturbValue()\l# perturbValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1AgrawalGenerator.html",tooltip="Stream generator for Agrawal dataset."];
  Node1 -> Node39 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node39 [label="{moa.streams.generators.cd.AbstractConceptDriftGenerator\n|+ instanceRandomSeedOption\l+ notBinaryStreamOption\l+ numInstancesConceptOption\l# clusterEvents\l# streamHeader\l# instanceRandom\l# period\l# numInstances\l# change\l- serialVersionUID\l|+ getPurposeString()\l+ getEventsList()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ getChange()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l# nextValue()\l- nextbinaryValue()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1cd_1_1AbstractConceptDriftGenerator.html"];
  Node1 -> Node40 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node40 [label="{moa.streams.generators.HyperplaneGenerator\n|+ instanceRandomSeedOption\l+ numClassesOption\l+ numAttsOption\l+ numDriftAttsOption\l+ magChangeOption\l+ noisePercentageOption\l+ sigmaPercentageOption\l+ numberInstance\l# streamHeader\l# instanceRandom\l# weights\l# sigma\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l# generateHeader()\l- addDrift()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1HyperplaneGenerator.html",tooltip="Stream generator for Hyperplane data stream."];
  Node1 -> Node41 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node41 [label="{moa.streams.generators.LEDGenerator\n|+ instanceRandomSeedOption\l+ noisePercentageOption\l+ suppressIrrelevantAttributesOption\l+ NUM_IRRELEVANT_ATTRIBUTES\l# streamHeader\l# instanceRandom\l# originalInstances\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1LEDGenerator.html",tooltip="Stream generator for the problem of predicting the digit displayed on a 7-segment..."];
  Node1 -> Node42 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node42 [label="{moa.streams.generators.multilabel.MetaMultilabelGenerator\n|+ binaryGeneratorOption\l+ metaRandomSeedOption\l+ numLabelsOption\l+ skewOption\l+ labelCardinalityOption\l+ labelCardinalityVarOption\l+ labelCardinalityRatioOption\l+ labelDependencyChangeRatioOption\l~ queue\l# m_MultilabelInstancesHeader\l# m_BinaryGenerator\l# multilabelStreamTemplate\l# m_MetaRandom\l# m_L\l# m_A\l# priors\l# priors_norm\l# Conditional\l# m_TopCombinations\l- serialVersionUID\l|+ prepareForUseImpl()\l+ restart()\l+ nextInstance()\l+ getHeader()\l+ getPurposeString()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ isRestartable()\l+ getDescription()\l+ main()\l# generateMultilabelHeader()\l# modifyPriorVector()\l# modifyDependencyMatrix()\l# generateConditional()\l- generatePriors()\l- getNextWithBinary()\l- generateSet()\l- joint()\l- generateMLInstance()\l- samplePMF()\l- getTopCombinations()\l- set2vector()\l- vector2set()\l- max()\l- min()\l- getShuffledListToLWithoutK()\l- printMatrix()\l- printVector()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1multilabel_1_1MetaMultilabelGenerator.html",tooltip="Stream generator for multilabel data."];
  Node1 -> Node43 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node43 [label="{moa.streams.generators.RandomRBFGenerator\n|+ modelRandomSeedOption\l+ instanceRandomSeedOption\l+ numClassesOption\l+ numAttsOption\l+ numCentroidsOption\l# streamHeader\l# centroids\l# centroidWeights\l# instanceRandom\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ getHeader()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ isRestartable()\l+ restart()\l+ nextInstance()\l+ getDescription()\l# generateHeader()\l# generateCentroids()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1RandomRBFGenerator.html",tooltip="Stream generator for a random radial basis function stream."];
  Node1 -> Node44 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node44 [label="{moa.streams.generators.RandomTreeGenerator\n|+ treeRandomSeedOption\l+ instanceRandomSeedOption\l+ numClassesOption\l+ numNominalsOption\l+ numNumericsOption\l+ numValsPerNominalOption\l+ maxTreeDepthOption\l+ firstLeafLevelOption\l+ leafFractionOption\l# treeRoot\l# streamHeader\l# instanceRandom\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ isRestartable()\l+ restart()\l+ getHeader()\l+ hasMoreInstances()\l+ nextInstance()\l+ getDescription()\l# classifyInstance()\l# generateHeader()\l# generateRandomTree()\l# generateRandomTreeNode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1RandomTreeGenerator.html",tooltip="Stream generator for a stream based on a randomly generated tree."];
  Node1 -> Node45 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node45 [label="{moa.streams.generators.SEAGenerator\n|+ functionOption\l+ instanceRandomSeedOption\l+ balanceClassesOption\l+ numInstancesConcept\l+ noisePercentageOption\l# streamHeader\l# instanceRandom\l# nextClassShouldBeZero\l# classificationFunctions\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1SEAGenerator.html",tooltip="Stream generator for SEA concepts functions."];
  Node1 -> Node46 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node46 [label="{moa.streams.generators.STAGGERGenerator\n|+ instanceRandomSeedOption\l+ functionOption\l+ balanceClassesOption\l# streamHeader\l# instanceRandom\l# nextClassShouldBeZero\l# classificationFunctions\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1STAGGERGenerator.html",tooltip="Stream generator for STAGGER Concept functions."];
  Node1 -> Node47 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node47 [label="{moa.streams.generators.WaveformGenerator\n|+ instanceRandomSeedOption\l+ addNoiseOption\l+ NUM_CLASSES\l+ NUM_BASE_ATTRIBUTES\l+ TOTAL_ATTRIBUTES_INCLUDING_NOISE\l# streamHeader\l# instanceRandom\l# hFunctions\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1WaveformGenerator.html",tooltip="Stream generator for the problem of predicting one of three waveform types."];
  Node1 -> Node48 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node48 [label="{moa.streams.MultiFilteredStream\n|+ streamOption\l+ filtersOption\l# filterChain\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1MultiFilteredStream.html",tooltip="Class for representing a stream that is filtered."];
  Node1 -> Node49 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node49 [label="{moa.tasks.AbstractTask\n||+ getTaskName()\l+ doTask()\l+ doTask()\l+ getDescription()\l# doTaskImpl()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1tasks_1_1AbstractTask.html",tooltip="Abstract Task."];
}
