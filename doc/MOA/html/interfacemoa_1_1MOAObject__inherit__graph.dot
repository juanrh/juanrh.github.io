digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node1 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.AbstractMOAObject\n||+ copy()\l+ measureByteSize()\l+ toString()\l+ copy()\l+ measureByteSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1AbstractMOAObject.html",tooltip="Abstract MOA Object."];
  Node3 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.classifiers.core.AttributeSplitSuggestion\n|+ splitTest\l+ resultingClassDistributions\l+ merit\l- serialVersionUID\l|+ AttributeSplitSuggestion()\l+ numSplits()\l+ resultingClassDistributionFromSplit()\l+ compareTo()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1AttributeSplitSuggestion.html",tooltip="Class for computing attribute split suggestions given a split test."];
  Node3 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.classifiers.core.conditionaltests.InstanceConditionalTest\n||+ branchForInstance()\l+ resultKnownForInstance()\l+ maxBranches()\l+ describeConditionForBranch()\l+ getAttsTestDependsOn()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1conditionaltests_1_1InstanceConditionalTest.html",tooltip="Abstract conditional test for instances to use to split nodes in Hoeffding trees..."];
  Node3 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.classifiers.core.driftdetection.ADWIN\n|+ DELTA\l+ MAXBUCKETS\l- mdbldelta\l- mintTime\l- mintClock\l- mdblWidth\l- lastBucketRow\l- TOTAL\l- VARIANCE\l- WIDTH\l- BucketNumber\l- Detect\l- numberDetections\l- DetectTwice\l- blnBucketDeleted\l- BucketNumberMAX\l- mintMinWinLength\l- listRowBuckets\l- mintMinimLongitudWindow\l|+ getChange()\l+ resetChange()\l+ getBucketsUsed()\l+ getWidth()\l+ setClock()\l+ getClock()\l+ getWarning()\l+ getDetect()\l+ getNumberDetections()\l+ getTotal()\l+ getEstimation()\l+ getVariance()\l+ getWidthT()\l+ deleteElement()\l+ compressBuckets()\l+ setInput()\l+ setInput()\l+ ADWIN()\l+ ADWIN()\l+ ADWIN()\l+ getEstimatorInfo()\l+ setW()\l+ getDescription()\l- initBuckets()\l- insertElement()\l- insertElementBucket()\l- bucketSize()\l- blnCutexpression()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1ADWIN.html",tooltip="ADaptive sliding WINdow method."];
  Node3 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.classifiers.core.driftdetection.ADWIN.List\n|# count\l# head\l# tail\l|+ List()\l+ size()\l+ head()\l+ tail()\l+ isEmpty()\l+ clear()\l+ addToHead()\l+ removeFromHead()\l+ addToTail()\l+ removeFromTail()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1ADWIN_1_1List.html"];
  Node3 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.classifiers.core.driftdetection.ADWIN.ListItem\n|# next\l# previous\l# bucketSizeRow\l# MAXBUCKETS\l# bucketTotal\l# bucketVariance\l|+ ListItem()\l+ clear()\l+ ListItem()\l+ insertBucket()\l+ RemoveBucket()\l+ compressBucketsRow()\l+ previous()\l+ setPrevious()\l+ next()\l+ setNext()\l+ Total()\l+ Variance()\l+ setTotal()\l+ setVariance()\l+ getDescription()\l- clearBucket()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1ADWIN_1_1ListItem.html"];
  Node3 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.classifiers.rules.core.Rule\n|# nodeList\l# learningNode\l# ruleNumberID\l# amRules\l- statisticsOtherBranchSplit\l- builder\l- serialVersionUID\l|+ getRuleNumberID()\l+ setRuleNumberID()\l+ getLearningNode()\l+ setLearningNode()\l+ getNodeList()\l+ getInstancesSeen()\l+ setNodeList()\l+ Rule()\l+ isCovering()\l+ getDescription()\l+ updateStatistics()\l+ tryToExpand()\l+ split()\l+ statisticsOtherBranchSplit()\l+ printRule()\l+ isAnomaly()\l+ computeError()\l+ updatePageHinckleyTest()\l+ getPrediction()\l+ getPrediction()\l+ getBuilder()\l+ setBuilder()\l+ getCurrentError()\l# debug()\l- newRuleActiveLearningNode()\l- nodeListAdd()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1core_1_1Rule.html"];
  Node3 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.classifiers.rules.core.voting.AbstractErrorWeightedVote\n|# votes\l# errors\l# weights\l- serialVersionUID\l|+ AbstractErrorWeightedVote()\l+ addVote()\l+ computeWeightedVote()\l+ getWeightedError()\l+ getWeights()\l+ getNumberVotes()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1core_1_1voting_1_1AbstractErrorWeightedVote.html",tooltip="AbstractErrorWeightedVote class for weighted votes based on estimates of errors."];
  Node3 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{moa.classifiers.rules.Predicates\n|- attributeValue\l- symbol\l- value\l- serialVersionUID\l|+ Predicates()\l+ getAttributeValue()\l+ getSymbol()\l+ getValue()\l+ setAttributeValue()\l+ setSymbol()\l+ setValue()\l+ evaluate()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1Predicates.html"];
  Node3 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{moa.classifiers.rules.RuleClassification\n|# predicateSet\l# observers\l# observersGauss\l# attributeStatisticsSupervised\l# squaredAttributeStatisticsSupervised\l# weightAttribute\l# attributeStatistics\l# attributesProbability\l# squaredAttributeStatistics\l# obserClassDistrib\l# attributeMissingValues\l# instancesSeen\l# instancesSeenTest\l# reset\l# actualClassStatistics\l# squaredActualClassStatistics\l# PHmT\l# PHMT\l# XiSum\l# ValorTargetRule\l- serialVersionUID\l|+ RuleClassification()\l+ RuleClassification()\l+ ruleEvaluate()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1RuleClassification.html"];
  Node3 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{moa.classifiers.trees.FIMTDD.FIMTDDPerceptron\n|# weightAttribute\l# attributeStatistics\l# squaredAttributeStatistics\l# instancesSeen\l# reset\l|+ getDescription()\l+ FIMTDDPerceptron()\l+ FIMTDDPerceptron()\l+ setWeights()\l+ getWeights()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ prediction()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1FIMTDD_1_1FIMTDDPerceptron.html",tooltip="A Perceptron classifier modified to conform to the specifications of Ikonomovska..."];
  Node3 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{moa.classifiers.trees.HoeffdingOptionTree.Node\n|# observedClassDistribution\l- serialVersionUID\l|+ Node()\l+ calcByteSize()\l+ calcByteSizeIncludingSubtree()\l+ isLeaf()\l+ filterInstanceToLeaves()\l+ filterInstanceToLeaves()\l+ getObservedClassDistribution()\l+ getClassVotes()\l+ observedClassDistributionIsPure()\l+ describeSubtree()\l+ subtreeDepth()\l+ calculatePromise()\l+ getDescription()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1HoeffdingOptionTree_1_1Node.html"];
  Node3 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{moa.classifiers.trees.HoeffdingTree.Node\n|# observedClassDistribution\l- serialVersionUID\l|+ Node()\l+ calcByteSize()\l+ calcByteSizeIncludingSubtree()\l+ isLeaf()\l+ filterInstanceToLeaf()\l+ getObservedClassDistribution()\l+ getClassVotes()\l+ observedClassDistributionIsPure()\l+ describeSubtree()\l+ subtreeDepth()\l+ calculatePromise()\l+ getDescription()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1HoeffdingTree_1_1Node.html"];
  Node3 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{moa.classifiers.trees.ORTO.Node\n|+ ID\l# parent\l# alternateTree\l# Alternate\l# Adaptable\l- serialVersionUID\l|+ Node()\l+ getDescription()\l+ calcByteSize()\l+ isLeaf()\l+ calculateDetph()\l+ getLevel()\l+ setParent()\l+ getParent()\l+ setChild()\l+ getChildIndex()\l+ getNumSubtrees()\l+ processInstance()\l+ getPrediction()\l+ setAdaptable()\l+ setAlternate()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1ORTO_1_1Node.html"];
  Node3 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 [label="{moa.classifiers.trees.ORTO.ORTOPerceptron\n|# weightAttribute\l# attributeStatistics\l# squaredAttributeStatistics\l# instancesSeen\l# reset\l- serialVersionUID\l|+ getDescription()\l+ ORTOPerceptron()\l+ ORTOPerceptron()\l+ setWeights()\l+ getWeights()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ prediction()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1ORTO_1_1ORTOPerceptron.html",tooltip="A Perceptron classifier modified to conform to the specifications of Ikonomovska..."];
  Node3 -> Node18 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node18 [label="{moa.cluster.Cluster\n|- id\l- gtLabel\l- measure_values\l- serialVersionUID\l|+ Cluster()\l+ getCenter()\l+ getWeight()\l+ getInclusionProbability()\l+ getDescription()\l+ setId()\l+ getId()\l+ isGroundTruth()\l+ setGroundTruth()\l+ getGroundTruth()\l+ sample()\l+ setMeasureValue()\l+ setMeasureValue()\l+ getMeasureValue()\l+ getInfo()\l# getClusterSpecificInfo()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1cluster_1_1Cluster.html"];
  Node3 -> Node19 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node19 [label="{moa.cluster.Clustering\n|- clusters\l|+ Clustering()\l+ Clustering()\l+ Clustering()\l+ Clustering()\l+ Clustering()\l+ add()\l+ remove()\l+ get()\l+ getClustering()\l+ getClusteringCopy()\l+ size()\l+ dimension()\l+ getDescription()\l+ getMaxInclusionProbability()\l+ classValues()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1cluster_1_1Clustering.html"];
  Node3 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node20 [label="{moa.clusterers.denstream.Timestamp\n|- timestamp\l|+ Timestamp()\l+ Timestamp()\l+ getTimestamp()\l+ increase()\l+ setTimestamp()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1denstream_1_1Timestamp.html"];
  Node3 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node21 [label="{moa.core.DoubleVector\n|# array\l- serialVersionUID\l|+ DoubleVector()\l+ DoubleVector()\l+ DoubleVector()\l+ numValues()\l+ setValue()\l+ addToValue()\l+ addValues()\l+ addValues()\l+ subtractValues()\l+ subtractValues()\l+ addToValues()\l+ scaleValues()\l+ getValue()\l+ sumOfValues()\l+ maxIndex()\l+ normalize()\l+ numNonZeroEntries()\l+ minWeight()\l+ getArrayCopy()\l+ getArrayRef()\l+ getSingleLineDescription()\l+ getSingleLineDescription()\l+ getDescription()\l# setArrayLength()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1DoubleVector.html",tooltip="Vector of double numbers with some utilities."];
  Node3 -> Node22 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node22 [label="{moa.core.GaussianEstimator\n|+ NORMAL_CONSTANT\l# weightSum\l# mean\l# varianceSum\l- serialVersionUID\l|+ addObservation()\l+ addObservations()\l+ getTotalWeightObserved()\l+ getMean()\l+ getStdDev()\l+ getVariance()\l+ probabilityDensity()\l+ estimatedWeight_LessThan_EqualTo_GreaterThan_Value()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1GaussianEstimator.html",tooltip="Gaussian incremental estimator that uses incremental method that is more resistant..."];
  Node3 -> Node23 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node23 [label="{moa.core.GreenwaldKhannaQuantileSummary\n|# summary\l# numTuples\l# numObservations\l- serialVersionUID\l|+ GreenwaldKhannaQuantileSummary()\l+ insert()\l+ getWorstError()\l+ findMaxDelta()\l+ compress()\l+ getQuantile()\l+ getTotalCount()\l+ getPropotionBelow()\l+ getCountBelow()\l+ getSuggestedCutpoints()\l+ getDescription()\l+ computeBandBoundaries()\l# insertTuple()\l# deleteTuple()\l# deleteTupleMostFull()\l# deleteMergeableTupleMostFull()\l# findIndexOfTupleGreaterThan()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1GreenwaldKhannaQuantileSummary.html",tooltip="Class for representing summaries of Greenwald and Khanna quantiles."];
  Node3 -> Node24 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node24 [label="{moa.core.Measurement\n|# name\l# value\l- serialVersionUID\l|+ Measurement()\l+ getName()\l+ getValue()\l+ getDescription()\l+ getMeasurementNamed()\l+ getMeasurementsDescription()\l+ averageMeasurements()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1Measurement.html",tooltip="Class for storing an evaluation measurement."];
  Node3 -> Node25 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node25 [label="{moa.core.utils.Converter\n|# m_InstancesTemplate\l# m_L\l|+ getL()\l+ Converter()\l+ Converter()\l+ createTemplate()\l+ formatInstance()\l+ getRelevantLabels()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1utils_1_1Converter.html",tooltip="Converter."];
  Node3 -> Node26 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node26 [label="{moa.evaluation.BasicClassificationPerformanceEvaluator\n|# weightObserved\l# weightCorrect\l# columnKappa\l# rowKappa\l# numClasses\l- weightCorrectNoChangeClassifier\l- lastSeenClass\l- serialVersionUID\l|+ reset()\l+ reset()\l+ addResult()\l+ getPerformanceMeasurements()\l+ getTotalWeightObserved()\l+ getFractionCorrectlyClassified()\l+ getFractionIncorrectlyClassified()\l+ getKappaStatistic()\l+ getKappaTemporalStatistic()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1BasicClassificationPerformanceEvaluator.html",tooltip="Classification evaluator that performs basic incremental evaluation."];
  Node3 -> Node27 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node27 [label="{moa.evaluation.BasicClusteringPerformanceEvaluator\n|# weightObserved\l# weightCorrect\l- serialVersionUID\l|+ reset()\l+ addLearningAttempt()\l+ getPerformanceMeasurements()\l+ getTotalWeightObserved()\l+ getFractionCorrectlyClassified()\l+ getFractionIncorrectlyClassified()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1BasicClusteringPerformanceEvaluator.html",tooltip="Clustering evaluator that performs basic incremental evaluation."];
  Node3 -> Node28 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node28 [label="{moa.evaluation.BasicConceptDriftPerformanceEvaluator\n|# weightObserved\l# numberDetections\l# numberDetectionsOccurred\l# numberChanges\l# numberWarnings\l# delay\l# errorPrediction\l# totalDelay\l# isWarningZone\l# inputValues\l- hasChangeOccurred\l- serialVersionUID\l|+ reset()\l+ addResult()\l+ getPerformanceMeasurements()\l+ getTotalWeightObserved()\l+ getNumberDetections()\l+ getInputValues()\l+ getPredictionError()\l+ getNumberChanges()\l+ getNumberChangesOccurred()\l+ getNumberWarnings()\l+ getTotalDelay()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1BasicConceptDriftPerformanceEvaluator.html"];
  Node3 -> Node29 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node29 [label="{moa.evaluation.BasicRegressionPerformanceEvaluator\n|# weightObserved\l# squareError\l# averageError\l# sumTarget\l# squareTargetError\l# averageTargetError\l- serialVersionUID\l|+ reset()\l+ addResult()\l+ getPerformanceMeasurements()\l+ getTotalWeightObserved()\l+ getMeanError()\l+ getSquareError()\l+ getTargetMeanError()\l+ getTargetSquareError()\l+ getDescription()\l- getRelativeMeanError()\l- getRelativeSquareError()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1BasicRegressionPerformanceEvaluator.html",tooltip="Regression evaluator that performs basic incremental evaluation."];
  Node3 -> Node30 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node30 [label="{moa.evaluation.LearningCurve\n|# measurementNames\l# measurementValues\l- serialVersionUID\l|+ LearningCurve()\l+ getOrderingMeasurementName()\l+ insertEntry()\l+ numEntries()\l+ headerToString()\l+ entryToString()\l+ getDescription()\l+ getMeasurement()\l+ getMeasurementName()\l# addMeasurementName()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1LearningCurve.html",tooltip="Class that stores and keeps the history of evaluation measurements."];
  Node3 -> Node31 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node31 [label="{moa.evaluation.LearningEvaluation\n|# measurements\l- serialVersionUID\l|+ LearningEvaluation()\l+ LearningEvaluation()\l+ LearningEvaluation()\l+ LearningEvaluation()\l+ getMeasurements()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1LearningEvaluation.html",tooltip="Class that stores an array of evaluation measurements."];
  Node3 -> Node32 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node32 [label="{moa.evaluation.MeasureCollection\n|- names\l- values\l- sortedValues\l- events\l- minValue\l- maxValue\l- sumValues\l- enabled\l- corrupted\l- time\l- debug\l- mm\l- map\l- numMeasures\l|+ MeasureCollection()\l+ addValue()\l+ addEmptyValue()\l+ getNumMeasures()\l+ getName()\l+ getMaxValue()\l+ getMinValue()\l+ getLastValue()\l+ getMean()\l+ clean()\l+ getMedian()\l+ getLowerQuartile()\l+ getUpperQuartile()\l+ getNumberOfValues()\l+ getValue()\l+ getAllValues()\l+ setEnabled()\l+ isEnabled()\l+ getMeanRunningTime()\l+ evaluateClusteringPerformance()\l+ getDescription()\l+ addEventType()\l+ getEventType()\l# getNames()\l# addValue()\l# getDefaultEnabled()\l# evaluateClustering()\l- updateSortedValues()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1MeasureCollection.html"];
  Node3 -> Node33 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node33 [label="{moa.options.AbstractOption\n|+ illegalNameCharacters\l# name\l# cliChar\l# purpose\l|+ AbstractOption()\l+ getName()\l+ getCLIChar()\l+ getPurpose()\l+ resetToDefault()\l+ getStateString()\l+ copy()\l+ getDescription()\l+ getEditComponent()\l+ nameIsLegal()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOption.html",tooltip="Abstract option."];
  Node3 -> Node34 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node34 [label="{moa.options.AbstractOptionHandler\n|# options\l# classOptionNamesToPreparedObjects\l- serialVersionUID\l|+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ getCLICreationString()\l+ copy()\l# prepareForUseImpl()\l# discoverOptionsViaReflection()\l# prepareClassOptions()\l# getPreparedClassOption()\l# getPreparedClassOption()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOptionHandler.html",tooltip="Abstract Option Handler."];
  Node34 -> Node35 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node35 [label="{moa.classifiers.AbstractClassifier\n|+ randomSeedOption\l+ classifierRandom\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l|+ getPurposeString()\l+ AbstractClassifier()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClassifiers()\l+ copy()\l+ correctlyClassifies()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1AbstractClassifier.html",tooltip="Abstract Classifier."];
  Node34 -> Node36 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node36 [label="{moa.clusterers.AbstractClusterer\n|+ evaluateMicroClusteringOption\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l# randomSeedOption\l# clustererRandom\l# clustering\l|+ getPurposeString()\l+ AbstractClusterer()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClusterers()\l+ copy()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ implementsMicroClusterer()\l+ keepClassLabel()\l+ getMicroClusteringResult()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1AbstractClusterer.html"];
  Node34 -> Node37 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node37 [label="{moa.evaluation.EWMAClassificationPerformanceEvaluator\n|+ alphaOption\l# TotalweightObserved\l# weightCorrect\l- serialVersionUID\l|+ reset()\l+ addResult()\l+ getPerformanceMeasurements()\l+ getTotalWeightObserved()\l+ getFractionCorrectlyClassified()\l+ getFractionIncorrectlyClassified()\l+ getDescription()\l+ prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1evaluation_1_1EWMAClassificationPerformanceEvaluator.html",tooltip="Classification evaluator that updates evaluation results using an Exponential Weighted..."];
  Node3 -> Node38 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node38 [label="{moa.options.Options\n|# optionList\l- serialVersionUID\l|+ addOption()\l+ numOptions()\l+ getOption()\l+ getOption()\l+ getOptionArray()\l+ removeOption()\l+ removeOption()\l+ removeAllOptions()\l+ resetToDefaults()\l+ setViaCLIString()\l+ getAsCLIString()\l+ getHelpString()\l+ getHelp()\l+ getDescription()\l# splitParameterFromRemainingOptions()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1Options.html",tooltip="File option."];
  Node3 -> Node39 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node39 [label="{moa.streams.CachedInstancesStream\n|# toStream\l# streamPos\l- serialVersionUID\l|+ CachedInstancesStream()\l+ getHeader()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ nextInstance()\l+ isRestartable()\l+ restart()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1CachedInstancesStream.html",tooltip="Stream generator for representing a stream that is cached in memory."];
  Node3 -> Node40 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node40 [label="{moa.tasks.FailedTaskReport\n|# failureReason\l- serialVersionUID\l|+ FailedTaskReport()\l+ getFailureReason()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1tasks_1_1FailedTaskReport.html",tooltip="Class for reporting a failed task."];
  Node1 -> Node41 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node41 [label="{moa.classifiers.Classifier\n||+ setModelContext()\l+ getModelContext()\l+ isRandomizable()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getVotesForInstance()\l+ correctlyClassifies()\l+ getModelMeasurements()\l+ getSubClassifiers()\l+ copy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1classifiers_1_1Classifier.html",tooltip="Classifier interface for incremental classification models."];
  Node41 -> Node35 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node42 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node42 [label="{moa.clusterers.Clusterer\n||+ setModelContext()\l+ getModelContext()\l+ isRandomizable()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getVotesForInstance()\l+ getModelMeasurements()\l+ getSubClusterers()\l+ copy()\l+ getClusteringResult()\l+ implementsMicroClusterer()\l+ getMicroClusteringResult()\l+ keepClassLabel()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1clusterers_1_1Clusterer.html"];
  Node42 -> Node36 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node43 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node43 [label="{moa.core.AutoExpandVector\< T \>\n|- serialVersionUID\l|+ AutoExpandVector()\l+ AutoExpandVector()\l+ add()\l+ get()\l+ set()\l+ add()\l+ addAll()\l+ addAll()\l+ clear()\l+ remove()\l+ remove()\l+ copy()\l+ measureByteSize()\l+ getDescription()\l# removeRange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1AutoExpandVector_3_01T_01_4.html",tooltip="Vector with the capability of automatic expansion."];
  Node1 -> Node44 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node44 [label="{moa.evaluation.ClassificationPerformanceEvaluator\n||+ reset()\l+ addResult()\l+ getPerformanceMeasurements()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$interfacemoa_1_1evaluation_1_1ClassificationPerformanceEvaluator.html",tooltip="Interface implemented by learner evaluators to monitor the results of the learning..."];
  Node44 -> Node26 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node44 -> Node28 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node44 -> Node37 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node45 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node45 [label="{moa.evaluation.LearningPerformanceEvaluator\n||+ reset()\l+ addLearningAttempt()\l+ getPerformanceMeasurements()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1evaluation_1_1LearningPerformanceEvaluator.html",tooltip="Interface implemented by learner evaluators to monitor the results of the learning..."];
  Node45 -> Node27 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node46 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node46 [label="{moa.options.Option\n||+ getName()\l+ getCLIChar()\l+ getPurpose()\l+ getDefaultCLIString()\l+ setValueViaCLIString()\l+ getValueAsCLIString()\l+ resetToDefault()\l+ getStateString()\l+ copy()\l+ getEditComponent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1Option.html",tooltip="Interface representing an option or parameter."];
  Node46 -> Node33 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node47 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node47 [label="{moa.options.OptionHandler\n||+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ copy()\l+ getCLICreationString()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1OptionHandler.html",tooltip="Interface representing an object that handles options or parameters."];
  Node47 -> Node41 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node47 -> Node42 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node47 -> Node34 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node48 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node48 [label="{moa.streams.InstanceStream\n||+ getHeader()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ nextInstance()\l+ isRestartable()\l+ restart()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$interfacemoa_1_1streams_1_1InstanceStream.html",tooltip="Interface representing a data stream of instances."];
  Node48 -> Node39 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node49 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node49 [label="{moa.tasks.Task\n||+ getTaskResultType()\l+ doTask()\l+ doTask()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$interfacemoa_1_1tasks_1_1Task.html",tooltip="Interface representing a task."];
}
