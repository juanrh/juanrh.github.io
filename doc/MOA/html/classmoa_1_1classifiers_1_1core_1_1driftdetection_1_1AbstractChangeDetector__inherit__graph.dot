digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.core.driftdetection.AbstractChangeDetector\n|# isChangeDetected\l# isWarningZone\l# estimation\l# delay\l# isInitialized\l|+ resetLearning()\l+ input()\l+ getChange()\l+ getWarningZone()\l+ getEstimation()\l+ getDelay()\l+ getOutput()\l+ getDescription()\l+ copy()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.options.AbstractOptionHandler\n|# options\l# classOptionNamesToPreparedObjects\l- serialVersionUID\l|+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ getCLICreationString()\l+ copy()\l# prepareForUseImpl()\l# discoverOptionsViaReflection()\l# prepareClassOptions()\l# getPreparedClassOption()\l# getPreparedClassOption()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOptionHandler.html",tooltip="Abstract Option Handler."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.AbstractMOAObject\n||+ copy()\l+ measureByteSize()\l+ toString()\l+ copy()\l+ measureByteSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1AbstractMOAObject.html",tooltip="Abstract MOA Object."];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node5 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node6 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.options.OptionHandler\n||+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ copy()\l+ getCLICreationString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1OptionHandler.html",tooltip="Interface representing an object that handles options or parameters."];
  Node4 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.classifiers.core.driftdetection.ChangeDetector\n||+ resetLearning()\l+ input()\l+ getChange()\l+ getWarningZone()\l+ getEstimation()\l+ getDelay()\l+ getOutput()\l+ getDescription()\l+ copy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1classifiers_1_1core_1_1driftdetection_1_1ChangeDetector.html",tooltip="Change Detector interface to implement methods that detects change."];
  Node6 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node1 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.classifiers.core.driftdetection.ADWINChangeDetector\n|+ deltaAdwinOption\l# adwin\l|+ input()\l+ resetLearning()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1ADWINChangeDetector.html",tooltip="Drift detection method based in ADWIN."];
  Node1 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.classifiers.core.driftdetection.CusumDM\n|+ minNumInstancesOption\l+ deltaOption\l+ lambdaOption\l- m_n\l- sum\l- x_mean\l- alpha\l- delta\l- lambda\l- serialVersionUID\l|+ CusumDM()\l+ resetLearning()\l+ input()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1CusumDM.html",tooltip="Drift detection method based in Cusum."];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.classifiers.core.driftdetection.DDM\n|+ minNumInstancesOption\l- m_n\l- m_p\l- m_s\l- m_psmin\l- m_pmin\l- m_smin\l- serialVersionUID\l|+ DDM()\l+ resetLearning()\l+ input()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1DDM.html",tooltip="Drift detection method based in DDM method of Joao Gama SBIA 2004."];
  Node1 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{moa.classifiers.core.driftdetection.EDDM\n|- m_numErrors\l- m_minNumErrors\l- m_n\l- m_d\l- m_lastd\l- m_mean\l- m_stdTemp\l- m_m2smax\l- m_lastLevel\l- serialVersionUID\l- FDDM_OUTCONTROL\l- FDDM_WARNING\l- FDDM_MINNUMINSTANCES\l|+ EDDM()\l+ resetLearning()\l+ input()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1EDDM.html",tooltip="Drift detection method based in EDDM method of Manuel Baena et al."];
  Node1 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{moa.classifiers.core.driftdetection.EnsembleDriftDetectionMethods\n|+ minNumInstancesOption\l+ changeDetectorsOption\l+ predictionOption\l# cds\l# preds\l- serialVersionUID\l|+ EnsembleDriftDetectionMethods()\l+ resetLearning()\l+ input()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1EnsembleDriftDetectionMethods.html",tooltip="Ensemble Drift detection method."];
  Node1 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{moa.classifiers.core.driftdetection.EWMAChartDM\n|+ minNumInstancesOption\l+ lambdaOption\l- m_n\l- m_sum\l- m_p\l- m_s\l- lambda\l- z_t\l- serialVersionUID\l|+ EWMAChartDM()\l+ resetLearning()\l+ input()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1EWMAChartDM.html",tooltip="Drift detection method based in EWMA Charts of Ross, Adams, Tasoulis and Hand 2012..."];
  Node1 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{moa.classifiers.core.driftdetection.GeometricMovingAverageDM\n|+ minNumInstancesOption\l+ lambdaOption\l+ alphaOption\l- m_n\l- sum\l- x_mean\l- alpha\l- delta\l- lambda\l- serialVersionUID\l|+ GeometricMovingAverageDM()\l+ resetLearning()\l+ input()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1GeometricMovingAverageDM.html",tooltip="Drift detection method based in Geometric Moving Average Test."];
  Node1 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{moa.classifiers.core.driftdetection.HDDM_A_Test\n|+ driftConfidenceOption\l+ warningConfidenceOption\l+ oneSidedTestOption\l# n_min\l# c_min\l# total_n\l# total_c\l# n_max\l# c_max\l# cEstimacion\l# nEstimacion\l|+ HDDM_A_Test()\l+ input()\l+ resetLearning()\l+ getEstimation()\l+ getDescription()\l# updateEstimations()\l# prepareForUseImpl()\l- meanIncr()\l- meanDecr()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1HDDM__A__Test.html"];
  Node1 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{moa.classifiers.core.driftdetection.HDDM_W_Test\n|+ driftConfidenceOption\l+ warningConfidenceOption\l+ lambdaOption\l+ oneSidedTestOption\l# incrCutPoint\l# decrCutPoint\l# lambda\l# warningConfidence\l# driftConfidence\l# oneSidedTest\l# width\l# serialVersionUID\l- sample1_IncrMonitoring\l- sample2_IncrMonitoring\l- sample1_DecrMonitoring\l- sample2_DecrMonitoring\l- total\l|+ HDDM_W_Test()\l+ resetLearning()\l+ input()\l+ input()\l+ detectMeanIncrement()\l+ getDescription()\l~ updateIncrStatistics()\l~ updateDecrStatistics()\l# monitorMeanIncr()\l# monitorMeanDecr()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1HDDM__W__Test.html"];
  Node1 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 [label="{moa.classifiers.core.driftdetection.PageHinkleyDM\n|+ minNumInstancesOption\l+ deltaOption\l+ lambdaOption\l+ alphaOption\l- m_n\l- sum\l- x_mean\l- alpha\l- delta\l- lambda\l- serialVersionUID\l|+ PageHinkleyDM()\l+ resetLearning()\l+ input()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1driftdetection_1_1PageHinkleyDM.html",tooltip="Drift detection method based in Page Hinkley Test."];
}
