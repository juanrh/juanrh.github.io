digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.trees.ORTO\n|+ maxID\l+ PageHinckleyAlphaOption\l+ PageHinckleyThresholdOption\l+ AlternateTreeFadingFactorOption\l+ AlternateTreeTMinOption\l+ AlternateTreeTimeOption\l+ LearningRatioOption\l+ LearningRatioDecayOrConstOption\l+ MaxTreesOption\l+ MaxOptionLevelOption\l+ OptionDecayFactorOption\l+ splitCriterionOption\l+ numericEstimatorOption\l+ gracePeriodOption\l+ splitConfidenceOption\l+ tieThresholdOption\l+ removePoorAttsOption\l+ OptionNodeAggregationOption\l+ OptionFadingFactorOption\l# treeRoot\l# maxDepth\l# inactiveLeafByteSizeEstimate\l# activeLeafByteSizeEstimate\l# byteSizeEstimateOverheadFraction\l# nodesToAdapt\l# Adaptable\l# initLearnRate\l# learnRateDecay\l- leafNodeCount\l- innerNodeCount\l- optionNodeCount\l- numTrees\l- learnTime\l- predictTime\l- serialVersionUID\l|+ getPurposeString()\l+ ORTO()\l+ resetLearningImpl()\l+ isRandomizable()\l+ calcByteSize()\l+ getModelDescription()\l+ getVotesForInstance()\l+ trainOnInstanceImpl()\l+ computeHoeffdingBound()\l# checkRoot()\l# getModelMeasurementsImpl()\l# newNumericClassObserver()\l# findWorstOption()\l# removeExcessTrees()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.classifiers.AbstractClassifier\n|+ randomSeedOption\l+ classifierRandom\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l|+ getPurposeString()\l+ AbstractClassifier()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClassifiers()\l+ copy()\l+ correctlyClassifies()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1AbstractClassifier.html",tooltip="Abstract Classifier."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.options.AbstractOptionHandler\n|# options\l# classOptionNamesToPreparedObjects\l- serialVersionUID\l|+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ getCLICreationString()\l+ copy()\l# prepareForUseImpl()\l# discoverOptionsViaReflection()\l# prepareClassOptions()\l# getPreparedClassOption()\l# getPreparedClassOption()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOptionHandler.html",tooltip="Abstract Option Handler."];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.AbstractMOAObject\n||+ copy()\l+ measureByteSize()\l+ toString()\l+ copy()\l+ measureByteSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1AbstractMOAObject.html",tooltip="Abstract MOA Object."];
  Node5 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node6 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node7 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.options.OptionHandler\n||+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ copy()\l+ getCLICreationString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1OptionHandler.html",tooltip="Interface representing an object that handles options or parameters."];
  Node5 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="classOptionNamesToPreparedObjects",arrowtail="open",fontname="Helvetica"];
  Node8 [label="{Map\< String, Object \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node9 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="options",arrowtail="open",fontname="Helvetica"];
  Node9 [label="{moa.options.Options\n|# optionList\l- serialVersionUID\l|+ addOption()\l+ numOptions()\l+ getOption()\l+ getOption()\l+ getOptionArray()\l+ removeOption()\l+ removeOption()\l+ removeAllOptions()\l+ resetToDefaults()\l+ setViaCLIString()\l+ getAsCLIString()\l+ getHelpString()\l+ getHelp()\l+ getDescription()\l# splitParameterFromRemainingOptions()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1Options.html",tooltip="File option."];
  Node4 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 -> Node9 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="optionList",arrowtail="open",fontname="Helvetica"];
  Node10 [label="{List\< Option \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node11 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{moa.classifiers.Classifier\n||+ setModelContext()\l+ getModelContext()\l+ isRandomizable()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getVotesForInstance()\l+ correctlyClassifies()\l+ getModelMeasurements()\l+ getSubClassifiers()\l+ copy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1classifiers_1_1Classifier.html",tooltip="Classifier interface for incremental classification models."];
  Node5 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{moa.gui.AWTRenderable\n||+ getAWTRenderer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1gui_1_1AWTRenderable.html",tooltip="Interface representing a component that is renderable."];
  Node13 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="randomSeedOption",arrowtail="open",fontname="Helvetica"];
  Node13 [label="{moa.options.IntOption\n|# currentVal\l# defaultVal\l# minVal\l# maxVal\l- serialVersionUID\l|+ IntOption()\l+ IntOption()\l+ setValue()\l+ getValue()\l+ getMinValue()\l+ getMaxValue()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getEditComponent()\l+ cliStringToInt()\l+ intToCLIString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1IntOption.html",tooltip="Int option."];
  Node14 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{moa.options.AbstractOption\n|+ illegalNameCharacters\l# name\l# cliChar\l# purpose\l|+ AbstractOption()\l+ getName()\l+ getCLIChar()\l+ getPurpose()\l+ resetToDefault()\l+ getStateString()\l+ copy()\l+ getDescription()\l+ getEditComponent()\l+ nameIsLegal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOption.html",tooltip="Abstract option."];
  Node4 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{moa.options.Option\n||+ getName()\l+ getCLIChar()\l+ getPurpose()\l+ getDefaultCLIString()\l+ setValueViaCLIString()\l+ getValueAsCLIString()\l+ resetToDefault()\l+ getStateString()\l+ copy()\l+ getEditComponent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1Option.html",tooltip="Interface representing an option or parameter."];
  Node5 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="modelContext",arrowtail="open",fontname="Helvetica"];
  Node16 [label="{moa.core.InstancesHeader\n|- serialVersionUID\l|+ InstancesHeader()\l+ add()\l+ readInstance()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getNumericValueString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1InstancesHeader.html",tooltip="Class for storing the header or context of a data stream."];
  Node17 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 [label="{Instances\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node18 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="classifierRandom",arrowtail="open",fontname="Helvetica"];
  Node18 [label="{Random\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node19 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node19 [label="{moa.classifiers.Regressor\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1classifiers_1_1Regressor.html",tooltip="Regressor interface for incremental regression models."];
  Node20 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="LearningRatioOption\ntieThresholdOption\nPageHinckleyAlphaOption\nsplitConfidenceOption\nOptionFadingFactorOption\nOptionDecayFactorOption\nAlternateTreeFadingFactorOption",arrowtail="open",fontname="Helvetica"];
  Node20 [label="{moa.options.FloatOption\n|# currentVal\l# defaultVal\l# minVal\l# maxVal\l- serialVersionUID\l|+ FloatOption()\l+ FloatOption()\l+ setValue()\l+ getValue()\l+ getMinValue()\l+ getMaxValue()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getEditComponent()\l+ cliStringToDouble()\l+ doubleToCLIString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1FloatOption.html",tooltip="Float option."];
  Node14 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node21 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="nodesToAdapt",arrowtail="open",fontname="Helvetica"];
  Node21 [label="{ArrayList\< InnerNode \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node22 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="treeRoot",arrowtail="open",fontname="Helvetica"];
  Node22 [label="{moa.classifiers.trees.ORTO.Node\n|+ ID\l# parent\l# alternateTree\l# Alternate\l# Adaptable\l- serialVersionUID\l|+ Node()\l+ getDescription()\l+ calcByteSize()\l+ isLeaf()\l+ calculateDetph()\l+ getLevel()\l+ setParent()\l+ getParent()\l+ setChild()\l+ getChildIndex()\l+ getNumSubtrees()\l+ processInstance()\l+ getPrediction()\l+ setAdaptable()\l+ setAlternate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1ORTO_1_1Node.html"];
  Node4 -> Node22 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node23 -> Node22 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="parent",arrowtail="open",fontname="Helvetica"];
  Node23 [label="{moa.classifiers.trees.ORTO.InnerNode\n|# children\l# PHmT\l# PHMT\l# lossStatistics\l# weightSeen\l# previousWeight\l- serialVersionUID\l|+ InnerNode()\l+ numChildren()\l+ getChild()\l+ getChildIndex()\l+ setChild()\l+ setAlternateTree()\l+ getAlternateTree()\l+ calcByteSize()\l+ calculateDetph()\l+ PageHinckleyTest()\l+ setAdaptable()\l+ setAlternate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1ORTO_1_1InnerNode.html"];
  Node22 -> Node23 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node24 -> Node23 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="lossStatistics",arrowtail="open",fontname="Helvetica"];
  Node24 [label="{moa.core.DoubleVector\n|# array\l- serialVersionUID\l|+ DoubleVector()\l+ DoubleVector()\l+ DoubleVector()\l+ numValues()\l+ setValue()\l+ addToValue()\l+ addValues()\l+ addValues()\l+ subtractValues()\l+ subtractValues()\l+ addToValues()\l+ scaleValues()\l+ getValue()\l+ sumOfValues()\l+ maxIndex()\l+ normalize()\l+ numNonZeroEntries()\l+ minWeight()\l+ getArrayCopy()\l+ getArrayRef()\l+ getSingleLineDescription()\l+ getSingleLineDescription()\l+ getDescription()\l# setArrayLength()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1DoubleVector.html",tooltip="Vector of double numbers with some utilities."];
  Node4 -> Node24 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node25 -> Node23 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="children",arrowtail="open",fontname="Helvetica"];
  Node25 [label="{AutoExpandVector\< Node \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node22 -> Node22 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="alternateTree",arrowtail="open",fontname="Helvetica"];
  Node13 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="gracePeriodOption\nAlternateTreeTimeOption\nMaxTreesOption\nMaxOptionLevelOption\nAlternateTreeTMinOption\nPageHinckleyThresholdOption",arrowtail="open",fontname="Helvetica"];
  Node26 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="splitCriterionOption\nnumericEstimatorOption",arrowtail="open",fontname="Helvetica"];
  Node26 [label="{moa.options.ClassOption\n|- serialVersionUID\l|+ ClassOption()\l+ ClassOption()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getEditComponent()\l+ objectToCLIString()\l+ cliStringToObject()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1ClassOption.html",tooltip="Class option."];
  Node27 -> Node26 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node27 [label="{moa.options.AbstractClassOption\n|+ FILE_PREFIX_STRING\l+ INMEM_PREFIX_STRING\l# currentValue\l# requiredType\l# defaultCLIString\l# nullString\l- serialVersionUID\l|+ AbstractClassOption()\l+ AbstractClassOption()\l+ setCurrentObject()\l+ getPreMaterializedObject()\l+ getRequiredType()\l+ getNullString()\l+ materializeObject()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getEditComponent()\l+ classToCLIString()\l+ stripPackagePrefix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractClassOption.html",tooltip="Abstract class option."];
  Node14 -> Node27 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node28 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="LearningRatioDecayOrConstOption\nremovePoorAttsOption",arrowtail="open",fontname="Helvetica"];
  Node28 [label="{moa.options.FlagOption\n|# isSet\l- serialVersionUID\l|+ FlagOption()\l+ setValue()\l+ set()\l+ unset()\l+ isSet()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getStateString()\l+ getEditComponent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1FlagOption.html",tooltip="Flag option."];
  Node14 -> Node28 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node29 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="OptionNodeAggregationOption",arrowtail="open",fontname="Helvetica"];
  Node29 [label="{moa.options.MultiChoiceOption\n|# optionLabels\l# optionDescriptions\l# defaultOptionIndex\l# chosenOptionIndex\l- serialVersionUID\l|+ MultiChoiceOption()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ setChosenLabel()\l+ setChosenIndex()\l+ getOptionLabels()\l+ getChosenLabel()\l+ getChosenIndex()\l+ getEditComponent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1MultiChoiceOption.html",tooltip="Multi choice option."];
  Node14 -> Node29 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
}
