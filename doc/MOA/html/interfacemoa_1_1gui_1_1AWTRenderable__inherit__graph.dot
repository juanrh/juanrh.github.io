digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.gui.AWTRenderable\n||+ getAWTRenderer()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.classifiers.Classifier\n||+ setModelContext()\l+ getModelContext()\l+ isRandomizable()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getVotesForInstance()\l+ correctlyClassifies()\l+ getModelMeasurements()\l+ getSubClassifiers()\l+ copy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1classifiers_1_1Classifier.html",tooltip="Classifier interface for incremental classification models."];
  Node2 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.classifiers.AbstractClassifier\n|+ randomSeedOption\l+ classifierRandom\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l|+ getPurposeString()\l+ AbstractClassifier()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClassifiers()\l+ copy()\l+ correctlyClassifies()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1AbstractClassifier.html",tooltip="Abstract Classifier."];
  Node3 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.classifiers.active.ActiveClassifier\n|+ baseLearnerOption\l+ activeLearningStrategyOption\l+ budgetOption\l+ fixedThresholdOption\l+ stepOption\l+ numInstancesInitOption\l+ classifier\l+ costLabeling\l+ costLabelingRandom\l+ iterationControl\l+ newThreshold\l+ maxPosterior\l+ accuracyBaseLearner\l- outPosterior\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l# getModelMeasurementsImpl()\l- getMaxPosterior()\l- labelRandom()\l- labelFixed()\l- labelVar()\l- labelSelSampling()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1active_1_1ActiveClassifier.html",tooltip="Active learning setting for evolving data streams."];
  Node3 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.classifiers.bayes.NaiveBayes\n|# observedClassDistribution\l# attributeObservers\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ isRandomizable()\l+ manageMemory()\l+ doNaiveBayesPrediction()\l+ doNaiveBayesPredictionLog()\l# getModelMeasurementsImpl()\l# newNominalClassObserver()\l# newNumericClassObserver()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1bayes_1_1NaiveBayes.html",tooltip="Naive Bayes incremental learner."];
  Node3 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.classifiers.bayes.NaiveBayesMultinomial\n|+ laplaceCorrectionOption\l# m_classTotals\l# m_headerInfo\l# m_numClasses\l# m_probOfClass\l# m_wordTotalForClass\l# reset\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ totalSize()\l+ getModelDescription()\l+ isRandomizable()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1bayes_1_1NaiveBayesMultinomial.html",tooltip="Class for building and using a multinomial Naive Bayes classifier."];
  Node3 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.classifiers.DecisionStumpTutorial\n|+ gracePeriodOption\l+ binarySplitsOption\l+ splitCriterionOption\l# bestSplit\l# observedClassDistribution\l# attributeObservers\l# weightSeenAtLastSplit\l- serialVersionUID\l|+ isRandomizable()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l# newNominalClassObserver()\l# newNumericClassObserver()\l# findBestSplit()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1DecisionStumpTutorial.html"];
  Node3 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.classifiers.drift.DriftDetectionMethodClassifier\n|+ baseLearnerOption\l+ driftDetectionMethodOption\l+ DDM_INCONTROL_LEVEL\l+ DDM_WARNING_LEVEL\l+ DDM_OUTCONTROL_LEVEL\l# classifier\l# newclassifier\l# driftDetectionMethod\l# newClassifierReset\l# ddmLevel\l# changeDetected\l# warningDetected\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1drift_1_1DriftDetectionMethodClassifier.html",tooltip="Class for handling concept drift datasets with a wrapper on a classifier."];
  Node3 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.classifiers.functions.MajorityClass\n|# observedClassDistribution\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ isRandomizable()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1functions_1_1MajorityClass.html",tooltip="Majority class learner."];
  Node3 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.classifiers.functions.NoChange\n|# lastSeenClass\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ isRandomizable()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1functions_1_1NoChange.html",tooltip="NoChange class classifier."];
  Node3 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{moa.classifiers.functions.Perceptron\n|+ learningRatioOption\l# weightAttribute\l# reset\l# numberAttributes\l# numberClasses\l# numberDetections\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ setWeights()\l+ getWeights()\l+ getNumberAttributes()\l+ getNumberClasses()\l+ prediction()\l+ getVotesForInstance()\l+ getModelDescription()\l+ isRandomizable()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1functions_1_1Perceptron.html",tooltip="Single perceptron classifier."];
  Node3 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{moa.classifiers.functions.SGD\n|+ lambdaRegularizationOption\l+ learningRateOption\l+ lossFunctionOption\l# m_lambda\l# m_learningRate\l# m_weights\l# m_bias\l# m_t\l# m_numInstances\l# m_loss\l# HINGE\l# LOGLOSS\l# SQUAREDLOSS\l- serialVersionUID\l|+ getPurposeString()\l+ setLambda()\l+ getLambda()\l+ setLossFunction()\l+ getLossFunction()\l+ setLearningRate()\l+ getLearningRate()\l+ reset()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ toString()\l+ isRandomizable()\l# dloss()\l# getModelMeasurementsImpl()\l# dotProd()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1functions_1_1SGD.html",tooltip="Implements stochastic gradient descent for learning various linear models (binary..."];
  Node3 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{moa.classifiers.functions.SGDMultiClass\n|+ lambdaRegularizationOption\l+ learningRateOption\l+ lossFunctionOption\l# m_lambda\l# m_learningRate\l# m_weights\l# m_bias\l# m_t\l# m_numInstances\l# m_loss\l# HINGE\l# LOGLOSS\l# SQUAREDLOSS\l- serialVersionUID\l|+ getPurposeString()\l+ setLambda()\l+ getLambda()\l+ setLossFunction()\l+ getLossFunction()\l+ setLearningRate()\l+ getLearningRate()\l+ reset()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ toString()\l+ isRandomizable()\l# dloss()\l# getModelMeasurementsImpl()\l# dotProd()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1functions_1_1SGDMultiClass.html",tooltip="Implements stochastic gradient descent for learning various linear models (binary..."];
  Node3 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{moa.classifiers.functions.SPegasos\n|+ lambdaRegularizationOption\l+ lossFunctionOption\l# m_lambda\l# m_loss\l# m_weights\l# m_t\l# HINGE\l# LOGLOSS\l- serialVersionUID\l|+ getPurposeString()\l+ setLambda()\l+ getLambda()\l+ setLossFunction()\l+ getLossFunction()\l+ reset()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ toString()\l+ isRandomizable()\l# dloss()\l# getModelMeasurementsImpl()\l# dotProd()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1functions_1_1SPegasos.html",tooltip="Implements the stochastic variant of the Pegasos (Primal Estimated sub-GrAdient SOlver..."];
  Node3 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{moa.classifiers.lazy.kNN\n|+ kOption\l+ limitOption\l+ nearestNeighbourSearchOption\l~ C\l# window\l- serialVersionUID\l|+ getPurposeString()\l+ setModelContext()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ isRandomizable()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1lazy_1_1kNN.html",tooltip="k Nearest Neighbor."];
  Node3 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{moa.classifiers.meta.AccuracyUpdatedEnsemble\n|+ learnerOption\l+ memberCountOption\l+ chunkSizeOption\l+ maxByteSizeOption\l# weights\l# classDistributions\l# learners\l# processedInstances\l# candidate\l# currentChunk\l- serialVersionUID\l|+ prepareForUseImpl()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ isRandomizable()\l+ getVotesForInstance()\l+ getModelDescription()\l+ getSubClassifiers()\l# processChunk()\l# enforceMemoryLimit()\l# computeMseR()\l# computeMse()\l# getModelMeasurementsImpl()\l# addToStored()\l- getPoorestClassifierIndex()\l- initVariables()\l- trainOnChunk()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1AccuracyUpdatedEnsemble.html",tooltip="The revised version of the Accuracy Updated Ensemble as proposed by Brzezinski and..."];
  Node3 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 [label="{moa.classifiers.meta.AccuracyWeightedEnsemble\n|+ learnerOption\l+ memberCountOption\l+ storedCountOption\l+ chunkSizeOption\l+ numFoldsOption\l# classDistributions\l# ensemble\l# storedLearners\l# ensembleWeights\l# storedWeights\l# processedInstances\l# chunkSize\l# numFolds\l# maxMemberCount\l# maxStoredCount\l# candidateClassifier\l# currentChunk\l# weightComparator\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ isRandomizable()\l+ getSubClassifiers()\l# processChunk()\l# computeCandidateWeight()\l# computeWeight()\l# computeMseR()\l# getModelMeasurementsImpl()\l# addToStored()\l# removePoorestModelBytes()\l# discardModel()\l- initVariables()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1AccuracyWeightedEnsemble.html",tooltip="The Accuracy Weighted Ensemble classifier as proposed by Wang et al."];
  Node3 -> Node18 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node18 [label="{moa.classifiers.meta.DACC\n|+ learnerOption\l+ memberCountOption\l+ maturityOption\l+ evaluationSizeOption\l+ combinationOption\l# ensemble\l# ensembleWeights\l# ensembleAges\l# ensembleWindows\l# nbInstances\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ discardModel()\l+ getModelDescription()\l+ isRandomizable()\l+ getSubClassifiers()\l# initVariables()\l# trainAndClassify()\l# updateEvaluationWindow()\l# getHalf()\l# getMAXIndexes()\l# getWVDIndexes()\l# getNbActiveClassifiers()\l# getNbAdaptiveClassifiers()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1DACC.html",tooltip="Dynamic Adaptation to Concept Changes."];
  Node3 -> Node19 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node19 [label="{moa.classifiers.meta.LeveragingBag\n|+ baseLearnerOption\l+ ensembleSizeOption\l+ weightShrinkOption\l+ deltaAdwinOption\l+ outputCodesOption\l+ leveraginBagAlgorithmOption\l# ensemble\l# ADError\l# numberOfChangesDetected\l# matrixCodes\l# initMatrixCodes\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getVotesForInstanceBinary()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1LeveragingBag.html",tooltip="Leveraging Bagging for evolving data streams using ADWIN."];
  Node3 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node20 [label="{moa.classifiers.meta.LimAttClassifier\n|+ baseLearnerOption\l+ numAttributesOption\l+ weightShrinkOption\l+ deltaAdwinOption\l+ oddsOffsetOption\l+ pruneOption\l+ bigTreesOption\l+ numEnsemblePruningOption\l+ adwinReplaceWorstClassifierOption\l+ learningRatioOption\l+ penaltyFactorOption\l+ initialNumInstancesOption\l# ensemble\l# ADError\l# numberOfChangesDetected\l# matrixCodes\l# initMatrixCodes\l# initClassifiers\l# numberAttributes\l# numInstances\l# weightAttribute\l# reset\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l+ trainOnInstanceImplPerceptron()\l+ predictionPruning()\l+ prediction()\l+ getVotesForInstancePerceptron()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1LimAttClassifier.html",tooltip="Ensemble Combining Restricted Hoeffding Trees using Stacking."];
  Node3 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node21 [label="{moa.classifiers.meta.OCBoost\n|+ baseLearnerOption\l+ ensembleSizeOption\l+ smoothingOption\l# ensemble\l# alpha\l# alphainc\l# pipos\l# pineg\l# wpos\l# wneg\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l# getEnsembleMemberWeight()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1OCBoost.html",tooltip="Online Coordinate boosting for two classes evolving data streams."];
  Node3 -> Node22 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node22 [label="{moa.classifiers.meta.OnlineAccuracyUpdatedEnsemble\n|+ learnerOption\l+ memberCountOption\l+ windowSizeOption\l+ maxByteSizeOption\l+ verboseOption\l+ linearOption\l# weights\l# classDistributions\l# ensemble\l# processedInstances\l# candidate\l# currentWindow\l# mse_r\l# windowSize\l- serialVersionUID\l|+ prepareForUseImpl()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ isRandomizable()\l+ getVotesForInstance()\l+ getModelDescription()\l+ getSubClassifiers()\l# createNewClassifier()\l# enforceMemoryLimit()\l# computeMseR()\l# computeWeight()\l# getModelMeasurementsImpl()\l# addToStored()\l- getPoorestClassifierIndex()\l- initVariables()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1OnlineAccuracyUpdatedEnsemble.html",tooltip="The online version of the Accuracy Updated Ensemble as proposed by Brzezinski and..."];
  Node3 -> Node23 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node23 [label="{moa.classifiers.meta.OnlineSmoothBoost\n|+ baseLearnerOption\l+ ensembleSizeOption\l+ gammaOption\l# ensemble\l# alpha\l# gamma\l# theta\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l# getEnsembleMemberWeight()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1OnlineSmoothBoost.html",tooltip="Incremental on-line boosting with Theoretical Justifications of Shang-Tse Chen, Hsuan-Tien..."];
  Node3 -> Node24 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node24 [label="{moa.classifiers.meta.OzaBag\n|+ baseLearnerOption\l+ ensembleSizeOption\l# ensemble\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1OzaBag.html",tooltip="Incremental on-line bagging of Oza and Russell."];
  Node3 -> Node25 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node25 [label="{moa.classifiers.meta.OzaBagAdwin\n|+ baseLearnerOption\l+ ensembleSizeOption\l# ensemble\l# ADError\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1OzaBagAdwin.html",tooltip="Bagging for evolving data streams using ADWIN."];
  Node3 -> Node26 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node26 [label="{moa.classifiers.meta.OzaBoost\n|+ baseLearnerOption\l+ ensembleSizeOption\l+ pureBoostOption\l# ensemble\l# scms\l# swms\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l# getEnsembleMemberWeight()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1OzaBoost.html",tooltip="Incremental on-line boosting of Oza and Russell."];
  Node3 -> Node27 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node27 [label="{moa.classifiers.meta.OzaBoostAdwin\n|+ baseLearnerOption\l+ ensembleSizeOption\l+ pureBoostOption\l+ deltaAdwinOption\l+ outputCodesOption\l+ sammeOption\l# ensemble\l# scms\l# swms\l# ADError\l# numberOfChangesDetected\l# matrixCodes\l# initMatrixCodes\l# logKm1\l# Km1\l# initKm1\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getVotesForInstanceBinary()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l# getEnsembleMemberWeight()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1OzaBoostAdwin.html",tooltip="Boosting for evolving data streams using ADWIN."];
  Node3 -> Node28 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node28 [label="{moa.classifiers.meta.RandomRules\n|+ baseLearnerOption\l+ ensembleSizeOption\l+ numAttributesPercentageOption\l+ useBaggingOption\l# ensemble\l# isRegression\l# listAttributes\l# numAttributes\l# dataset\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l# getModelMeasurementsImpl()\l- transformInstance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1RandomRules.html"];
  Node3 -> Node29 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node29 [label="{moa.classifiers.meta.TemporallyAugmentedClassifier\n|+ baseLearnerOption\l+ numOldLabelsOption\l+ labelDelayOption\l# baseLearner\l# oldLabels\l# header\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ addOldLabel()\l+ initHeader()\l+ extendWithOldLabels()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ toString()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1TemporallyAugmentedClassifier.html",tooltip="Include labels of previous instances into the training data."];
  Node3 -> Node30 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node30 [label="{moa.classifiers.meta.WeightedMajorityAlgorithm\n|+ learnerListOption\l+ betaOption\l+ gammaOption\l+ pruneOption\l# ensemble\l# ensembleWeights\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ isRandomizable()\l+ getSubClassifiers()\l+ discardModel()\l# getModelMeasurementsImpl()\l# removePoorestModelBytes()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1WeightedMajorityAlgorithm.html",tooltip="Weighted majority algorithm for data streams."];
  Node3 -> Node31 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node31 [label="{moa.classifiers.meta.WEKAClassifier\n|+ baseLearnerOption\l+ widthOption\l+ widthInitOption\l+ sampleFrequencyOption\l# classifier\l# numberInstances\l# instancesBuffer\l# isClassificationEnabled\l# isBufferStoring\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ buildClassifier()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ createWekaClassifier()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1WEKAClassifier.html",tooltip="Class for using a classifier from WEKA."];
  Node3 -> Node32 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node32 [label="{moa.classifiers.multilabel.MajorityLabelset\n|- m_L\l- maxValue\l- prediction\l- classFreqs\l- serialVersionUID\l|+ setModelContext()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l# updateCount()\l# getModelMeasurementsImpl()\l- toBitString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1multilabel_1_1MajorityLabelset.html",tooltip="Majority Labelset classifier."];
  Node3 -> Node33 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node33 [label="{moa.classifiers.rules.AbstractAMRules\n|+ splitConfidenceOption\l+ tieThresholdOption\l+ gracePeriodOption\l+ DriftDetectionOption\l+ pageHinckleyAlphaOption\l+ pageHinckleyThresholdOption\l+ noAnomalyDetectionOption\l+ multivariateAnomalyProbabilityThresholdOption\l+ univariateAnomalyprobabilityThresholdOption\l+ anomalyNumInstThresholdOption\l+ unorderedRulesOption\l+ VerbosityOption\l+ numericObserverOption\l+ NORMAL_CONSTANT\l# ruleSet\l# defaultRule\l# ruleNumberID\l# statistics\l- numChangesDetected\l- numAnomaliesDetected\l- numInstances\l- serialVersionUID\l|+ AbstractAMRules()\l+ isRandomizable()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ PrintRuleSet()\l+ newRuleActiveLearningNode()\l+ newRuleActiveLearningNode()\l+ getModelAttIndexToInstanceAttIndex()\l+ resetLearningImpl()\l+ newErrorWeightedVote()\l+ modelAttIndexToInstanceAttIndex()\l# newRule()\l# getModelMeasurementsImpl()\l# debug()\l# VerboseToConsole()\l- isAnomaly()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1AbstractAMRules.html"];
  Node3 -> Node34 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node34 [label="{moa.classifiers.rules.functions.Perceptron\n|+ constantLearningRatioDecayOption\l+ learningRatioOption\l+ learningRateDecayOption\l+ fadingFactorOption\l+ perceptronattributeStatistics\l+ squaredperceptronattributeStatistics\l# fadingFactor\l# learningRatio\l# learningRateDecay\l# weightAttribute\l# perceptronInstancesSeen\l# perceptronYSeen\l# accumulatedError\l# initialisePerceptron\l# perceptronsumY\l# squaredperceptronsumY\l- SD_THRESHOLD\l- nError\l- serialVersionUID\l|+ Perceptron()\l+ Perceptron()\l+ setWeights()\l+ getWeights()\l+ getInstancesSeen()\l+ setInstancesSeen()\l+ resetLearningImpl()\l+ reset()\l+ resetError()\l+ trainOnInstanceImpl()\l+ normalizedPrediction()\l+ prediction()\l+ normalizedInstance()\l+ computeSD()\l+ updateWeights()\l+ normalizeWeights()\l+ isRandomizable()\l+ getVotesForInstance()\l+ getModelDescription()\l+ setLearningRatio()\l+ getCurrentError()\l# getModelMeasurementsImpl()\l- prediction()\l- denormalizedPrediction()\l- normalizeActualClassValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1functions_1_1Perceptron.html"];
  Node3 -> Node35 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node35 [label="{moa.classifiers.rules.functions.TargetMean\n|+ fadingErrorFactorOption\l# n\l# sum\l# errorSum\l# nError\l- fadingErrorFactor\l- serialVersionUID\l|+ isRandomizable()\l+ getVotesForInstance()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ reset()\l+ getCurrentError()\l+ TargetMean()\l+ TargetMean()\l+ resetError()\l# updateAccumulatedError()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1functions_1_1TargetMean.html"];
  Node3 -> Node36 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node36 [label="{moa.classifiers.rules.RuleClassifier\n|+ PminOption\l+ splitConfidenceOption\l+ tieThresholdOption\l+ anomalyProbabilityThresholdOption\l+ probabilityThresholdOption\l+ anomalyNumInstThresholdOption\l+ gracePeriodOption\l+ predictionFunctionOption\l+ orderedRulesOption\l+ anomalyDetectionOption\l+ Supervised\l+ Unsupervised\l~ minEntropyTemp\l~ cutPointTemp\l~ minEntropyNominalAttrib\l~ symbol\l~ numInstance\l~ numAttributes\l~ numClass\l~ root\l~ pred\l# instance\l# attributeObservers\l# attributeObserversGauss\l# observedClassDistribution\l# saveBestEntropy\l# saveBestEntropyNominalAttrib\l# ruleClassIndex\l# saveBestGlobalEntropy\l# saveBestValGlobalEntropy\l# saveTheBest\l# ruleSet\l# ruleSetAnomalies\l# ruleAnomaliesIndex\l# caseAnomaly\l# ruleAttribAnomalyStatistics\l# ruleSetAnomaliesSupervised\l# ruleAnomaliesIndexSupervised\l# caseAnomalySupervised\l# ruleAttribAnomalyStatisticsSupervised\l- serialVersionUID\l|+ getPurposeString()\l+ getVotesForInstance()\l+ resetLearningImpl()\l+ getWeightSeen()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ printAnomaliesUnsupervised()\l+ printAnomaliesSupervised()\l+ getModelDescriptionNoAnomalyDetection()\l+ isRandomizable()\l+ getCountNominalAttrib()\l+ initializeRuleStatistics()\l+ updateRuleAttribStatistics()\l+ computeAnomalyUnsupervised()\l+ computeAnomalySupervised()\l+ computeMean()\l+ computeSD()\l+ computeProbability()\l+ createRule()\l+ expandeRule()\l+ theBestAttributes()\l+ entropy()\l+ findBestValEntropy()\l+ mainFindBestValEntropy()\l+ findBestValEntropyNominalAtt()\l+ ComputeHoeffdingBound()\l+ checkBestAttrib()\l+ manageMemory()\l# getModelMeasurementsImpl()\l# round()\l# getBestSecondBestEntropy()\l# getRuleMajorityClassIndex()\l# oberversDistribProb()\l# firstHit()\l# weightedMax()\l# weightedSum()\l# newNominalClassObserver()\l# newNumericClassObserver()\l# newNumericClassObserver2()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1RuleClassifier.html",tooltip="This classifier learn ordered and unordered rule set from data stream."];
  Node3 -> Node37 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node37 [label="{moa.classifiers.trees.DecisionStump\n|+ gracePeriodOption\l+ binarySplitsOption\l+ splitCriterionOption\l# bestSplit\l# observedClassDistribution\l# attributeObservers\l# weightSeenAtLastSplit\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ getModelDescription()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l# getModelMeasurementsImpl()\l# newNominalClassObserver()\l# newNumericClassObserver()\l# findBestSplit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1DecisionStump.html",tooltip="Decision trees of one level."];
  Node3 -> Node38 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node38 [label="{moa.classifiers.trees.HoeffdingOptionTree\n|+ maxOptionPathsOption\l+ maxByteSizeOption\l+ numericEstimatorOption\l+ nominalEstimatorOption\l+ memoryEstimatePeriodOption\l+ gracePeriodOption\l+ splitCriterionOption\l+ splitConfidenceOption\l+ secondarySplitConfidenceOption\l+ tieThresholdOption\l+ binarySplitsOption\l+ removePoorAttsOption\l+ noPrePruneOption\l+ dumpFileOption\l+ memoryStrategyOption\l+ leafpredictionOption\l+ nbThresholdOption\l# treeRoot\l# decisionNodeCount\l# activeLeafNodeCount\l# inactiveLeafNodeCount\l# inactiveLeafByteSizeEstimate\l# activeLeafByteSizeEstimate\l# byteSizeEstimateOverheadFraction\l# maxPredictionPaths\l- serialVersionUID\l|+ getPurposeString()\l+ calcByteSize()\l+ measureByteSize()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ measureTreeDepth()\l+ getModelDescription()\l+ isRandomizable()\l+ enforceTrackerLimit()\l+ estimateModelByteSizes()\l+ deactivateAllLeaves()\l+ computeHoeffdingBound()\l# getModelMeasurementsImpl()\l# newNominalClassObserver()\l# newNumericClassObserver()\l# attemptToSplit()\l# deactivateLearningNode()\l# activateLearningNode()\l# findLearningNodes()\l# findLearningNodes()\l# newLearningNode()\l# newLearningNode()\l- addToOptionTable()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1HoeffdingOptionTree.html",tooltip="Hoeffding Option Tree."];
  Node3 -> Node39 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node39 [label="{moa.classifiers.trees.HoeffdingTree\n|+ maxByteSizeOption\l+ numericEstimatorOption\l+ nominalEstimatorOption\l+ memoryEstimatePeriodOption\l+ gracePeriodOption\l+ splitCriterionOption\l+ splitConfidenceOption\l+ tieThresholdOption\l+ binarySplitsOption\l+ stopMemManagementOption\l+ removePoorAttsOption\l+ noPrePruneOption\l+ leafpredictionOption\l+ nbThresholdOption\l# treeRoot\l# decisionNodeCount\l# activeLeafNodeCount\l# inactiveLeafNodeCount\l# inactiveLeafByteSizeEstimate\l# activeLeafByteSizeEstimate\l# byteSizeEstimateOverheadFraction\l# growthAllowed\l- serialVersionUID\l|+ getPurposeString()\l+ calcByteSize()\l+ measureByteSize()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ measureTreeDepth()\l+ getModelDescription()\l+ isRandomizable()\l+ enforceTrackerLimit()\l+ estimateModelByteSizes()\l+ deactivateAllLeaves()\l+ computeHoeffdingBound()\l# getModelMeasurementsImpl()\l# newSplitNode()\l# newSplitNode()\l# newNominalClassObserver()\l# newNumericClassObserver()\l# attemptToSplit()\l# deactivateLearningNode()\l# activateLearningNode()\l# findLearningNodes()\l# findLearningNodes()\l# newLearningNode()\l# newLearningNode()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1HoeffdingTree.html",tooltip="Hoeffding Tree or VFDT."];
  Node3 -> Node40 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node40 [label="{moa.classifiers.trees.ORTO\n|+ maxID\l+ PageHinckleyAlphaOption\l+ PageHinckleyThresholdOption\l+ AlternateTreeFadingFactorOption\l+ AlternateTreeTMinOption\l+ AlternateTreeTimeOption\l+ LearningRatioOption\l+ LearningRatioDecayOrConstOption\l+ MaxTreesOption\l+ MaxOptionLevelOption\l+ OptionDecayFactorOption\l+ splitCriterionOption\l+ numericEstimatorOption\l+ gracePeriodOption\l+ splitConfidenceOption\l+ tieThresholdOption\l+ removePoorAttsOption\l+ OptionNodeAggregationOption\l+ OptionFadingFactorOption\l# treeRoot\l# maxDepth\l# inactiveLeafByteSizeEstimate\l# activeLeafByteSizeEstimate\l# byteSizeEstimateOverheadFraction\l# nodesToAdapt\l# Adaptable\l# initLearnRate\l# learnRateDecay\l- leafNodeCount\l- innerNodeCount\l- optionNodeCount\l- numTrees\l- learnTime\l- predictTime\l- serialVersionUID\l|+ getPurposeString()\l+ ORTO()\l+ resetLearningImpl()\l+ isRandomizable()\l+ calcByteSize()\l+ getModelDescription()\l+ getVotesForInstance()\l+ trainOnInstanceImpl()\l+ computeHoeffdingBound()\l# checkRoot()\l# getModelMeasurementsImpl()\l# newNumericClassObserver()\l# findWorstOption()\l# removeExcessTrees()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1ORTO.html"];
  Node3 -> Node41 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node41 [label="{moa.learners.ChangeDetectorLearner\n|+ driftDetectionMethodOption\l# driftDetectionMethod\l- serialVersionUID\l|+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1learners_1_1ChangeDetectorLearner.html",tooltip="Class for detecting concept drift and to be used as a learner."];
  Node1 -> Node42 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node42 [label="{moa.clusterers.Clusterer\n||+ setModelContext()\l+ getModelContext()\l+ isRandomizable()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getVotesForInstance()\l+ getModelMeasurements()\l+ getSubClusterers()\l+ copy()\l+ getClusteringResult()\l+ implementsMicroClusterer()\l+ getMicroClusteringResult()\l+ keepClassLabel()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1clusterers_1_1Clusterer.html"];
  Node42 -> Node43 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node43 [label="{moa.clusterers.AbstractClusterer\n|+ evaluateMicroClusteringOption\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l# randomSeedOption\l# clustererRandom\l# clustering\l|+ getPurposeString()\l+ AbstractClusterer()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClusterers()\l+ copy()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ implementsMicroClusterer()\l+ keepClassLabel()\l+ getMicroClusteringResult()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1AbstractClusterer.html"];
  Node43 -> Node44 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node44 [label="{moa.clusterers.ClusterGenerator\n|+ timeWindowOption\l+ radiusDecreaseOption\l+ radiusIncreaseOption\l+ positionOffsetOption\l+ clusterRemoveOption\l+ joinClustersOption\l+ clusterAddOption\l- points\l- instanceCounter\l- windowCounter\l- random\l- sourceClustering\l- serialVersionUID\l- err_intervall_width\l|+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ implementsMicroClusterer()\l+ setSourceClustering()\l+ getMicroClusteringResult()\l+ getClusteringResult()\l+ getModelDescription()\l+ isRandomizable()\l+ keepClassLabel()\l+ getVotesForInstance()\l# getModelMeasurementsImpl()\l- alterClustering()\l- joinClusters()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1ClusterGenerator.html"];
  Node43 -> Node45 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node45 [label="{moa.clusterers.clustream.Clustream\n|+ timeWindowOption\l+ maxNumKernelsOption\l+ kernelRadiFactorOption\l- timeWindow\l- timestamp\l- kernels\l- initialized\l- buffer\l- bufferSize\l- t\l- m\l- serialVersionUID\l|+ Clustream()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getMicroClusteringResult()\l+ implementsMicroClusterer()\l+ getClusteringResult()\l+ getName()\l+ getModelDescription()\l+ isRandomizable()\l+ getVotesForInstance()\l+ kMeans()\l+ kMeans()\l# getModelMeasurementsImpl()\l- distance()\l- calculateCenter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1clustream_1_1Clustream.html",tooltip="Citation: CluStream: Charu C."];
  Node43 -> Node46 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node46 [label="{moa.clusterers.clustream.WithKmeans\n|+ timeWindowOption\l+ maxNumKernelsOption\l+ kernelRadiFactorOption\l+ kOption\l- timeWindow\l- timestamp\l- kernels\l- initialized\l- buffer\l- bufferSize\l- t\l- m\l- serialVersionUID\l|+ WithKmeans()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getMicroClusteringResult()\l+ getClusteringResult()\l+ getClusteringResult()\l+ getName()\l+ implementsMicroClusterer()\l+ isRandomizable()\l+ getVotesForInstance()\l+ getModelDescription()\l+ kMeans_gta()\l+ kMeans_rand()\l# getModelMeasurementsImpl()\l# kMeans()\l# cleanUpKMeans()\l- distance()\l- calculateCenter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1clustream_1_1WithKmeans.html"];
  Node43 -> Node47 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node47 [label="{moa.clusterers.clustree.ClusTree\n|+ horizonOption\l+ maxHeightOption\l# root\l# negLambda\l# maxHeight\l# breadthFirstStrat\l- numberDimensions\l- height\l- numRootSplits\l- weightThreshold\l- numberInsertions\l- timestamp\l- alsoUpdate\l- serialVersionUID\l- INSERTIONS_BETWEEN_CLEANUPS\l|+ resetLearningImpl()\l+ isRandomizable()\l+ getModelDescription()\l+ getVotesForInstance()\l+ implementsMicroClusterer()\l+ trainOnInstanceImpl()\l+ insert()\l+ getNumRootSplits()\l+ getHeight()\l+ getMicroClusteringResult()\l+ getClusteringResult()\l+ getClustering()\l# getDefaultHeight()\l# getModelMeasurementsImpl()\l- insertBreadthFirst()\l- existsOutdatedEntryOnPath()\l- updateToTop()\l- insertHereWithSplit()\l- insertHere()\l- findBestLeafNode()\l- collectLeafNodes()\l- insert()\l- mergeEntryWithoutSplit()\l- calculateBestMergeInNode()\l- hasMaximalSize()\l- split()\l- cleanUp()\l}",height=0.2,width=0.4,color="red", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1clustree_1_1ClusTree.html",tooltip="Citation: ClusTree: Philipp Kranen, Ira Assent, Corinna Baldauf, Thomas Seidl: The..."];
  Node43 -> Node48 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node48 [label="{moa.clusterers.CobWeb\n|+ acuityOption\l+ cutoffOption\l+ randomSeedOption\l+ classifierPurposeString\l# m_acuity\l# m_cutoff\l# m_cobwebTree\l# m_numberOfClusters\l# m_numberOfClustersDetermined\l# m_numberSplits\l# m_numberMerges\l# m_saveInstances\l# m_normal\l- serialVersionUID\l|+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ numberOfClusters()\l+ getModelDescription()\l+ isRandomizable()\l+ graph()\l+ setAcuity()\l+ getAcuity()\l+ setCutoff()\l+ getCutoff()\l+ getSaveInstanceData()\l+ setSaveInstanceData()\l+ getClusteringResult()\l~ [instance initializer]()\l# determineNumberOfClusters()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1CobWeb.html",tooltip="Class implementing the Cobweb and Classit clustering algorithms."];
  Node43 -> Node49 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node49 [label="{moa.clusterers.denstream.WithDBSCAN\n|+ horizonOption\l+ epsilonOption\l+ betaOption\l+ muOption\l+ initPointsOption\l+ offlineOption\l+ lambdaOption\l+ speedOption\l~ lambda\l~ epsilon\l~ minPoints\l~ mu\l~ beta\l~ p_micro_cluster\l~ o_micro_cluster\l~ initBuffer\l~ initialized\l~ currentTimestamp\l~ tp\l# numInitPoints\l# numProcessedPerUnit\l# processingSpeed\l- weightThreshold\l- timestamp\l- serialVersionUID\l|+ resetLearningImpl()\l+ initialDBScan()\l+ trainOnInstanceImpl()\l+ getClusteringResult()\l+ implementsMicroClusterer()\l+ getMicroClusteringResult()\l+ getModelDescription()\l+ isRandomizable()\l+ getVotesForInstance()\l+ getParameterString()\l# getModelMeasurementsImpl()\l- expandCluster()\l- getNeighbourhoodIDs()\l- nearestCluster()\l- distance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1denstream_1_1WithDBSCAN.html"];
}
