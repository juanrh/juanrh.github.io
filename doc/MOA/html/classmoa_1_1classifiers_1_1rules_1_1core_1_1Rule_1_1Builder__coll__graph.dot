digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.rules.core.Rule.Builder\n|+ constantLearningRatioDecayOption\l+ learningRatioOption\l+ id\l+ amRules\l# changeDetection\l# usePerceptron\l# threshold\l# alpha\l# predictionFunction\l# statistics\l# lastTargetMean\l- owner\l- serialVersionUID\l|+ getAMRules()\l+ Builder()\l+ changeDetection()\l+ threshold()\l+ alpha()\l+ predictionFunction()\l+ statistics()\l+ owner()\l+ amRules()\l+ id()\l+ build()\l+ getOwner()\l+ setOwner()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node3 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="amRules",arrowtail="open",fontname="Helvetica"];
  Node3 [label="{moa.classifiers.rules.AbstractAMRules\n|+ splitConfidenceOption\l+ tieThresholdOption\l+ gracePeriodOption\l+ DriftDetectionOption\l+ pageHinckleyAlphaOption\l+ pageHinckleyThresholdOption\l+ noAnomalyDetectionOption\l+ multivariateAnomalyProbabilityThresholdOption\l+ univariateAnomalyprobabilityThresholdOption\l+ anomalyNumInstThresholdOption\l+ unorderedRulesOption\l+ VerbosityOption\l+ numericObserverOption\l+ NORMAL_CONSTANT\l# ruleSet\l# defaultRule\l# ruleNumberID\l# statistics\l- numChangesDetected\l- numAnomaliesDetected\l- numInstances\l- serialVersionUID\l|+ AbstractAMRules()\l+ isRandomizable()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ PrintRuleSet()\l+ newRuleActiveLearningNode()\l+ newRuleActiveLearningNode()\l+ getModelAttIndexToInstanceAttIndex()\l+ resetLearningImpl()\l+ newErrorWeightedVote()\l+ modelAttIndexToInstanceAttIndex()\l# newRule()\l# getModelMeasurementsImpl()\l# debug()\l# VerboseToConsole()\l- isAnomaly()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1AbstractAMRules.html"];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.classifiers.AbstractClassifier\n|+ randomSeedOption\l+ classifierRandom\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l|+ getPurposeString()\l+ AbstractClassifier()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClassifiers()\l+ copy()\l+ correctlyClassifies()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1AbstractClassifier.html",tooltip="Abstract Classifier."];
  Node5 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.options.AbstractOptionHandler\n|# options\l# classOptionNamesToPreparedObjects\l- serialVersionUID\l|+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ getCLICreationString()\l+ copy()\l# prepareForUseImpl()\l# discoverOptionsViaReflection()\l# prepareClassOptions()\l# getPreparedClassOption()\l# getPreparedClassOption()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOptionHandler.html",tooltip="Abstract Option Handler."];
  Node6 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.AbstractMOAObject\n||+ copy()\l+ measureByteSize()\l+ toString()\l+ copy()\l+ measureByteSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1AbstractMOAObject.html",tooltip="Abstract MOA Object."];
  Node7 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node2 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.options.OptionHandler\n||+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ copy()\l+ getCLICreationString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1OptionHandler.html",tooltip="Interface representing an object that handles options or parameters."];
  Node7 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 -> Node5 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="classOptionNamesToPreparedObjects",arrowtail="open",fontname="Helvetica"];
  Node9 [label="{Map\< String, Object \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node10 -> Node5 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="options",arrowtail="open",fontname="Helvetica"];
  Node10 [label="{moa.options.Options\n|# optionList\l- serialVersionUID\l|+ addOption()\l+ numOptions()\l+ getOption()\l+ getOption()\l+ getOptionArray()\l+ removeOption()\l+ removeOption()\l+ removeAllOptions()\l+ resetToDefaults()\l+ setViaCLIString()\l+ getAsCLIString()\l+ getHelpString()\l+ getHelp()\l+ getDescription()\l# splitParameterFromRemainingOptions()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1Options.html",tooltip="File option."];
  Node6 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 -> Node10 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="optionList",arrowtail="open",fontname="Helvetica"];
  Node11 [label="{List\< Option \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node12 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{moa.classifiers.Classifier\n||+ setModelContext()\l+ getModelContext()\l+ isRandomizable()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getVotesForInstance()\l+ correctlyClassifies()\l+ getModelMeasurements()\l+ getSubClassifiers()\l+ copy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1classifiers_1_1Classifier.html",tooltip="Classifier interface for incremental classification models."];
  Node7 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{moa.gui.AWTRenderable\n||+ getAWTRenderer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1gui_1_1AWTRenderable.html",tooltip="Interface representing a component that is renderable."];
  Node14 -> Node4 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="randomSeedOption",arrowtail="open",fontname="Helvetica"];
  Node14 [label="{moa.options.IntOption\n|# currentVal\l# defaultVal\l# minVal\l# maxVal\l- serialVersionUID\l|+ IntOption()\l+ IntOption()\l+ setValue()\l+ getValue()\l+ getMinValue()\l+ getMaxValue()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getEditComponent()\l+ cliStringToInt()\l+ intToCLIString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1IntOption.html",tooltip="Int option."];
  Node15 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{moa.options.AbstractOption\n|+ illegalNameCharacters\l# name\l# cliChar\l# purpose\l|+ AbstractOption()\l+ getName()\l+ getCLIChar()\l+ getPurpose()\l+ resetToDefault()\l+ getStateString()\l+ copy()\l+ getDescription()\l+ getEditComponent()\l+ nameIsLegal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOption.html",tooltip="Abstract option."];
  Node6 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{moa.options.Option\n||+ getName()\l+ getCLIChar()\l+ getPurpose()\l+ getDefaultCLIString()\l+ setValueViaCLIString()\l+ getValueAsCLIString()\l+ resetToDefault()\l+ getStateString()\l+ copy()\l+ getEditComponent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1Option.html",tooltip="Interface representing an option or parameter."];
  Node7 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 -> Node4 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="modelContext",arrowtail="open",fontname="Helvetica"];
  Node17 [label="{moa.core.InstancesHeader\n|- serialVersionUID\l|+ InstancesHeader()\l+ add()\l+ readInstance()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getNumericValueString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1InstancesHeader.html",tooltip="Class for storing the header or context of a data stream."];
  Node18 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node18 [label="{Instances\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node19 -> Node4 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="classifierRandom",arrowtail="open",fontname="Helvetica"];
  Node19 [label="{Random\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node20 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="multivariateAnomalyProbabilityThresholdOption\ntieThresholdOption\npageHinckleyAlphaOption\nsplitConfidenceOption\nunivariateAnomalyprobabilityThresholdOption",arrowtail="open",fontname="Helvetica"];
  Node20 [label="{moa.options.FloatOption\n|# currentVal\l# defaultVal\l# minVal\l# maxVal\l- serialVersionUID\l|+ FloatOption()\l+ FloatOption()\l+ setValue()\l+ getValue()\l+ getMinValue()\l+ getMaxValue()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getEditComponent()\l+ cliStringToDouble()\l+ doubleToCLIString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1FloatOption.html",tooltip="Float option."];
  Node15 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="anomalyNumInstThresholdOption\npageHinckleyThresholdOption\nVerbosityOption\ngracePeriodOption",arrowtail="open",fontname="Helvetica"];
  Node21 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="ruleSet",arrowtail="open",fontname="Helvetica"];
  Node21 [label="{moa.classifiers.rules.core.RuleSet\n|- serialVersionUID\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1core_1_1RuleSet.html"];
  Node22 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node22 [label="{java::util::ArrayList\< Rule \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node23 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="numericObserverOption",arrowtail="open",fontname="Helvetica"];
  Node23 [label="{moa.options.ClassOption\n|- serialVersionUID\l|+ ClassOption()\l+ ClassOption()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getEditComponent()\l+ objectToCLIString()\l+ cliStringToObject()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1ClassOption.html",tooltip="Class option."];
  Node24 -> Node23 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node24 [label="{moa.options.AbstractClassOption\n|+ FILE_PREFIX_STRING\l+ INMEM_PREFIX_STRING\l# currentValue\l# requiredType\l# defaultCLIString\l# nullString\l- serialVersionUID\l|+ AbstractClassOption()\l+ AbstractClassOption()\l+ setCurrentObject()\l+ getPreMaterializedObject()\l+ getRequiredType()\l+ getNullString()\l+ materializeObject()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getEditComponent()\l+ classToCLIString()\l+ stripPackagePrefix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractClassOption.html",tooltip="Abstract class option."];
  Node15 -> Node24 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node25 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="unorderedRulesOption\nnoAnomalyDetectionOption\nDriftDetectionOption",arrowtail="open",fontname="Helvetica"];
  Node25 [label="{moa.options.FlagOption\n|# isSet\l- serialVersionUID\l|+ FlagOption()\l+ setValue()\l+ set()\l+ unset()\l+ isSet()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getStateString()\l+ getEditComponent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1FlagOption.html",tooltip="Flag option."];
  Node15 -> Node25 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node26 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="defaultRule",arrowtail="open",fontname="Helvetica"];
  Node26 [label="{moa.classifiers.rules.core.Rule\n|# nodeList\l# learningNode\l# ruleNumberID\l# amRules\l- statisticsOtherBranchSplit\l- builder\l- serialVersionUID\l|+ getRuleNumberID()\l+ setRuleNumberID()\l+ getLearningNode()\l+ setLearningNode()\l+ getNodeList()\l+ getInstancesSeen()\l+ setNodeList()\l+ Rule()\l+ isCovering()\l+ getDescription()\l+ updateStatistics()\l+ tryToExpand()\l+ split()\l+ statisticsOtherBranchSplit()\l+ printRule()\l+ isAnomaly()\l+ computeError()\l+ updatePageHinckleyTest()\l+ getPrediction()\l+ getPrediction()\l+ getBuilder()\l+ setBuilder()\l+ getCurrentError()\l# debug()\l- newRuleActiveLearningNode()\l- nodeListAdd()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1core_1_1Rule.html"];
  Node6 -> Node26 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 -> Node26 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="amRules",arrowtail="open",fontname="Helvetica"];
  Node1 -> Node26 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="builder",arrowtail="open",fontname="Helvetica"];
  Node27 -> Node26 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="learningNode",arrowtail="open",fontname="Helvetica"];
  Node27 [label="{moa.classifiers.rules.core.RuleActiveLearningNode\n|# pageHinckleyTest\l# predictionFunction\l# changeDetection\l# owner\l# nodeStatistics\l# amRules\l# bestSuggestion\l# splitIndex\l# statisticsNewRuleActiveLearningNode\l# statisticsBranchSplit\l# statisticsOtherBranchSplit\l- serialVersionUID\l|+ RuleActiveLearningNode()\l+ RuleActiveLearningNode()\l+ RuleActiveLearningNode()\l+ learnFromInstance()\l+ learnFromInstance()\l+ updateStatistics()\l+ getAttributeObservers()\l+ getPrediction()\l+ getPrediction()\l+ getLearnerToUse()\l+ computeError()\l+ updatePageHinckleyTest()\l+ getInstancesSeen()\l+ isAnomaly()\l+ computeProbability()\l+ getSplitIndex()\l+ setSplitIndex()\l+ getBestSuggestion()\l+ setBestSuggestion()\l+ getStatisticsBranchSplit()\l+ setStatisticsBranchSplit()\l+ getStatisticsNewRuleActiveLearningNode()\l+ setStatisticsNewRuleActiveLearningNode()\l+ getStatisticsOtherBranchSplit()\l+ setStatisticsOtherBranchSplit()\l+ tryToExpand()\l+ initialize()\l+ getSimplePrediction()\l+ getNodeStatistics()\l+ updateChangeDetection()\l+ getCurrentError()\l+ computeHoeffdingBound()\l# newNumericClassObserver()\l# debug()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1core_1_1RuleActiveLearningNode.html",tooltip="A modified ActiveLearningNode that uses a Perceptron as the leaf node model, and..."];
  Node28 -> Node27 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node28 [label="{moa.classifiers.trees.HoeffdingTree.ActiveLearningNode\n|# weightSeenAtLastSplitEvaluation\l# attributeObservers\l# isInitialized\l- serialVersionUID\l|+ ActiveLearningNode()\l+ calcByteSize()\l+ learnFromInstance()\l+ getWeightSeen()\l+ getWeightSeenAtLastSplitEvaluation()\l+ setWeightSeenAtLastSplitEvaluation()\l+ getBestSplitSuggestions()\l+ disableAttribute()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1HoeffdingTree_1_1ActiveLearningNode.html"];
  Node29 -> Node28 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node29 [label="{moa.classifiers.trees.HoeffdingTree.LearningNode\n|- serialVersionUID\l|+ LearningNode()\l+ learnFromInstance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1HoeffdingTree_1_1LearningNode.html"];
  Node30 -> Node29 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node30 [label="{moa.classifiers.trees.HoeffdingTree.Node\n|# observedClassDistribution\l- serialVersionUID\l|+ Node()\l+ calcByteSize()\l+ calcByteSizeIncludingSubtree()\l+ isLeaf()\l+ filterInstanceToLeaf()\l+ getObservedClassDistribution()\l+ getClassVotes()\l+ observedClassDistributionIsPure()\l+ describeSubtree()\l+ subtreeDepth()\l+ calculatePromise()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1HoeffdingTree_1_1Node.html"];
  Node6 -> Node30 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node31 -> Node30 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="observedClassDistribution",arrowtail="open",fontname="Helvetica"];
  Node31 [label="{moa.core.DoubleVector\n|# array\l- serialVersionUID\l|+ DoubleVector()\l+ DoubleVector()\l+ DoubleVector()\l+ numValues()\l+ setValue()\l+ addToValue()\l+ addValues()\l+ addValues()\l+ subtractValues()\l+ subtractValues()\l+ addToValues()\l+ scaleValues()\l+ getValue()\l+ sumOfValues()\l+ maxIndex()\l+ normalize()\l+ numNonZeroEntries()\l+ minWeight()\l+ getArrayCopy()\l+ getArrayRef()\l+ getSingleLineDescription()\l+ getSingleLineDescription()\l+ getDescription()\l# setArrayLength()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1DoubleVector.html",tooltip="Vector of double numbers with some utilities."];
  Node6 -> Node31 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node32 -> Node28 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="attributeObservers",arrowtail="open",fontname="Helvetica"];
  Node32 [label="{AutoExpandVector\< AttributeClassObserver \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node3 -> Node27 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="amRules",arrowtail="open",fontname="Helvetica"];
  Node33 -> Node27 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="bestSuggestion",arrowtail="open",fontname="Helvetica"];
  Node33 [label="{moa.classifiers.core.AttributeSplitSuggestion\n|+ splitTest\l+ resultingClassDistributions\l+ merit\l- serialVersionUID\l|+ AttributeSplitSuggestion()\l+ numSplits()\l+ resultingClassDistributionFromSplit()\l+ compareTo()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1AttributeSplitSuggestion.html",tooltip="Class for computing attribute split suggestions given a split test."];
  Node6 -> Node33 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node34 -> Node33 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="splitTest",arrowtail="open",fontname="Helvetica"];
  Node34 [label="{moa.classifiers.core.conditionaltests.InstanceConditionalTest\n||+ branchForInstance()\l+ resultKnownForInstance()\l+ maxBranches()\l+ describeConditionForBranch()\l+ getAttsTestDependsOn()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1conditionaltests_1_1InstanceConditionalTest.html",tooltip="Abstract conditional test for instances to use to split nodes in Hoeffding trees..."];
  Node6 -> Node34 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node35 -> Node27 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="pageHinckleyTest",arrowtail="open",fontname="Helvetica"];
  Node35 [label="{moa.classifiers.rules.driftdetection.PageHinkleyTest\n|# cumulativeSum\l# minimumValue\l# sumAbsolutError\l# phinstancesSeen\l# threshold\l# alpha\l- serialVersionUID\l|+ getCumulativeSum()\l+ getMinimumValue()\l+ PageHinkleyTest()\l+ reset()\l+ update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1driftdetection_1_1PageHinkleyTest.html"];
  Node2 -> Node35 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node31 -> Node27 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="nodeStatistics",arrowtail="open",fontname="Helvetica"];
  Node26 -> Node27 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="owner",arrowtail="open",fontname="Helvetica"];
  Node36 -> Node26 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="nodeList",arrowtail="open",fontname="Helvetica"];
  Node36 [label="{List\< RuleSplitNode \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node20 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="learningRatioOption",arrowtail="open",fontname="Helvetica"];
  Node25 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="constantLearningRatioDecayOption",arrowtail="open",fontname="Helvetica"];
  Node26 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="owner",arrowtail="open",fontname="Helvetica"];
}
