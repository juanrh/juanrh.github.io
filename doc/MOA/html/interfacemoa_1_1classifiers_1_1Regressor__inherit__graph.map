<map id="G" name="G">
<area shape="rect" id="node3" href="$classmoa_1_1classifiers_1_1functions_1_1SGD.html" title="Implements stochastic gradient descent for learning various linear models (binary..." alt="" coords="5,295,211,883"/>
<area shape="rect" id="node5" href="$classmoa_1_1classifiers_1_1functions_1_1SGDMultiClass.html" title="Implements stochastic gradient descent for learning various linear models (binary..." alt="" coords="235,287,496,892"/>
<area shape="rect" id="node7" href="$classmoa_1_1classifiers_1_1meta_1_1RandomRules.html" title="{moa.classifiers.meta.RandomRules\n|+ baseLearnerOption\l+ ensembleSizeOption\l+ numAttributesPercentageOption\l+ useBaggingOption\l# ensemble\l# isRegression\l# listAttributes\l# numAttributes\l# dataset\l&#45; serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l# getModelMeasurementsImpl()\l&#45; transformInstance()\l}" alt="" coords="520,399,749,779"/>
<area shape="rect" id="node9" href="$classmoa_1_1classifiers_1_1rules_1_1AMRulesRegressor.html" title="{moa.classifiers.rules.AMRulesRegressor\n|+ constantLearningRatioDecayOption\l+ learningRatioOption\l+ predictionFunctionOption\l+ votingTypeOption\l&#45; serialVersionUID\l|+ newRuleActiveLearningNode()\l+ newRuleActiveLearningNode()\l+ getModelDescription()\l+ resetLearningImpl()\l+ isRandomizable()\l+ newErrorWeightedVote()\l# newRule()\l&#45; newRule()\l}" alt="" coords="773,451,1032,727"/>
<area shape="rect" id="node11" href="$classmoa_1_1classifiers_1_1rules_1_1functions_1_1Perceptron.html" title="{moa.classifiers.rules.functions.Perceptron\n|+ constantLearningRatioDecayOption\l+ learningRatioOption\l+ learningRateDecayOption\l+ fadingFactorOption\l+ perceptronattributeStatistics\l+ squaredperceptronattributeStatistics\l# fadingFactor\l# learningRatio\l# learningRateDecay\l# weightAttribute\l# perceptronInstancesSeen\l# perceptronYSeen\l# accumulatedError\l# initialisePerceptron\l# perceptronsumY\l# squaredperceptronsumY\l&#45; SD_THRESHOLD\l&#45; nError\l&#45; serialVersionUID\l|+ Perceptron()\l+ Perceptron()\l+ setWeights()\l+ getWeights()\l+ getInstancesSeen()\l+ setInstancesSeen()\l+ resetLearningImpl()\l+ reset()\l+ resetError()\l+ trainOnInstanceImpl()\l+ normalizedPrediction()\l+ prediction()\l+ normalizedInstance()\l+ computeSD()\l+ updateWeights()\l+ normalizeWeights()\l+ isRandomizable()\l+ getVotesForInstance()\l+ getModelDescription()\l+ setLearningRatio()\l+ getCurrentError()\l# getModelMeasurementsImpl()\l&#45; prediction()\l&#45; denormalizedPrediction()\l&#45; normalizeActualClassValue()\l}" alt="" coords="1056,183,1323,996"/>
<area shape="rect" id="node13" href="$classmoa_1_1classifiers_1_1rules_1_1functions_1_1TargetMean.html" title="{moa.classifiers.rules.functions.TargetMean\n|+ fadingErrorFactorOption\l# n\l# sum\l# errorSum\l# nError\l&#45; fadingErrorFactor\l&#45; serialVersionUID\l|+ isRandomizable()\l+ getVotesForInstance()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ reset()\l+ getCurrentError()\l+ TargetMean()\l+ TargetMean()\l+ resetError()\l# updateAccumulatedError()\l# getModelMeasurementsImpl()\l}" alt="" coords="1347,399,1619,779"/>
<area shape="rect" id="node17" href="$classmoa_1_1classifiers_1_1trees_1_1FIMTDD.html" title="{moa.classifiers.trees.FIMTDD\n|+ PageHinckleyAlphaOption\l+ PageHinckleyThresholdOption\l+ AlternateTreeFadingFactorOption\l+ AlternateTreeTMinOption\l+ AlternateTreeTimeOption\l+ learningRatioOption\l+ learningRatio_Decay_or_Const_Option\l# splitRatioStatistics\l# nodesToAdapt\l# Adaptable\l# initLearnRate\l# learnRateDecay\l&#45; serialVersionUID\l|+ getPurposeString()\l+ FIMTDD()\l+ trainOnInstanceImpl()\l# FIMTDD_attemptToSplit()\l# newLearningNode()\l# newLearningNode()\l# newSplitNode()\l}" alt="" coords="1643,391,1901,788"/>
<area shape="rect" id="node19" href="$classmoa_1_1classifiers_1_1trees_1_1ORTO.html" title="{moa.classifiers.trees.ORTO\n|+ maxID\l+ PageHinckleyAlphaOption\l+ PageHinckleyThresholdOption\l+ AlternateTreeFadingFactorOption\l+ AlternateTreeTMinOption\l+ AlternateTreeTimeOption\l+ LearningRatioOption\l+ LearningRatioDecayOrConstOption\l+ MaxTreesOption\l+ MaxOptionLevelOption\l+ OptionDecayFactorOption\l+ splitCriterionOption\l+ numericEstimatorOption\l+ gracePeriodOption\l+ splitConfidenceOption\l+ tieThresholdOption\l+ removePoorAttsOption\l+ OptionNodeAggregationOption\l+ OptionFadingFactorOption\l# treeRoot\l# maxDepth\l# inactiveLeafByteSizeEstimate\l# activeLeafByteSizeEstimate\l# byteSizeEstimateOverheadFraction\l# nodesToAdapt\l# Adaptable\l# initLearnRate\l# learnRateDecay\l&#45; leafNodeCount\l&#45; innerNodeCount\l&#45; optionNodeCount\l&#45; numTrees\l&#45; learnTime\l&#45; predictTime\l&#45; serialVersionUID\l|+ getPurposeString()\l+ ORTO()\l+ resetLearningImpl()\l+ isRandomizable()\l+ calcByteSize()\l+ getModelDescription()\l+ getVotesForInstance()\l+ trainOnInstanceImpl()\l+ computeHoeffdingBound()\l# checkRoot()\l# getModelMeasurementsImpl()\l# newNumericClassObserver()\l# findWorstOption()\l# removeExcessTrees()\l}" alt="" coords="1925,139,2163,1039"/>
<area shape="rect" id="node15" href="$classmoa_1_1classifiers_1_1rules_1_1functions_1_1FadingTargetMean.html" title="{moa.classifiers.rules.functions.FadingTargetMean\n|+ fadingFactorOption\l&#45; nD\l&#45; fadingFactor\l&#45; serialVersionUID\l|+ trainOnInstanceImpl()\l+ resetLearningImpl()\l+ getVotesForInstance()\l}" alt="" coords="1328,1089,1637,1261"/>
</map>
