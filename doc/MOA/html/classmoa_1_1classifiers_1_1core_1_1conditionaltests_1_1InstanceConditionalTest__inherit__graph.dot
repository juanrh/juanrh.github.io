digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.core.conditionaltests.InstanceConditionalTest\n||+ branchForInstance()\l+ resultKnownForInstance()\l+ maxBranches()\l+ describeConditionForBranch()\l+ getAttsTestDependsOn()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.AbstractMOAObject\n||+ copy()\l+ measureByteSize()\l+ toString()\l+ copy()\l+ measureByteSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1AbstractMOAObject.html",tooltip="Abstract MOA Object."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node1 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.classifiers.core.conditionaltests.InstanceConditionalBinaryTest\n||+ maxBranches()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1conditionaltests_1_1InstanceConditionalBinaryTest.html",tooltip="Abstract binary conditional test for instances to use to split nodes in Hoeffding..."];
  Node5 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.classifiers.core.conditionaltests.NominalAttributeBinaryTest\n|# attIndex\l# attValue\l- serialVersionUID\l|+ NominalAttributeBinaryTest()\l+ branchForInstance()\l+ describeConditionForBranch()\l+ getDescription()\l+ getAttsTestDependsOn()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1conditionaltests_1_1NominalAttributeBinaryTest.html",tooltip="Nominal binary conditional test for instances to use to split nodes in Hoeffding..."];
  Node6 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.classifiers.rules.core.conditionaltests.NominalAttributeBinaryRulePredicate\n|- serialVersionUID\l|+ NominalAttributeBinaryRulePredicate()\l+ evaluate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1core_1_1conditionaltests_1_1NominalAttributeBinaryRulePredicate.html",tooltip="Nominal binary conditional test for instances to use to split nodes in rules."];
  Node5 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.classifiers.core.conditionaltests.NumericAttributeBinaryTest\n|# attIndex\l# attValue\l# equalsPassesTest\l- serialVersionUID\l|+ NumericAttributeBinaryTest()\l+ branchForInstance()\l+ describeConditionForBranch()\l+ getDescription()\l+ getAttsTestDependsOn()\l+ getSplitValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1conditionaltests_1_1NumericAttributeBinaryTest.html",tooltip="Numeric binary conditional test for instances to use to split nodes in Hoeffding..."];
  Node5 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.classifiers.rules.core.conditionaltests.NumericAttributeBinaryRulePredicate\n|# attIndex\l# attValue\l# operator\l- serialVersionUID\l|+ NumericAttributeBinaryRulePredicate()\l+ branchForInstance()\l+ describeConditionForBranch()\l+ getDescription()\l+ getAttsTestDependsOn()\l+ getSplitValue()\l+ evaluate()\l+ toString()\l+ isEqual()\l+ isUsingSameAttribute()\l+ isIncludedInRuleNode()\l+ setAttributeValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1core_1_1conditionaltests_1_1NumericAttributeBinaryRulePredicate.html",tooltip="Numeric binary conditional test for instances to use to split nodes in AMRules."];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.classifiers.core.conditionaltests.NominalAttributeMultiwayTest\n|# attIndex\l- serialVersionUID\l|+ NominalAttributeMultiwayTest()\l+ branchForInstance()\l+ describeConditionForBranch()\l+ maxBranches()\l+ getDescription()\l+ getAttsTestDependsOn()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1conditionaltests_1_1NominalAttributeMultiwayTest.html",tooltip="Nominal multi way conditional test for instances to use to split nodes in Hoeffding..."];
}
