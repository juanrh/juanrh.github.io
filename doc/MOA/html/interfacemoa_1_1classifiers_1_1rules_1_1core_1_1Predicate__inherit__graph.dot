digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.rules.core.Predicate\n||+ evaluate()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.classifiers.rules.core.conditionaltests.NominalAttributeBinaryRulePredicate\n|- serialVersionUID\l|+ NominalAttributeBinaryRulePredicate()\l+ evaluate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1core_1_1conditionaltests_1_1NominalAttributeBinaryRulePredicate.html",tooltip="Nominal binary conditional test for instances to use to split nodes in rules."];
  Node1 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.classifiers.rules.core.conditionaltests.NumericAttributeBinaryRulePredicate\n|# attIndex\l# attValue\l# operator\l- serialVersionUID\l|+ NumericAttributeBinaryRulePredicate()\l+ branchForInstance()\l+ describeConditionForBranch()\l+ getDescription()\l+ getAttsTestDependsOn()\l+ getSplitValue()\l+ evaluate()\l+ toString()\l+ isEqual()\l+ isUsingSameAttribute()\l+ isIncludedInRuleNode()\l+ setAttributeValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1core_1_1conditionaltests_1_1NumericAttributeBinaryRulePredicate.html",tooltip="Numeric binary conditional test for instances to use to split nodes in AMRules."];
}
