digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.lazy.neighboursearch.KDTree\n|+ MIN\l+ MAX\l+ WIDTH\l~ m_NormalizeNodeWidth\l# m_DistanceList\l# m_InstList\l# m_Root\l# m_Splitter\l# m_NumNodes\l# m_NumLeaves\l# m_MaxDepth\l# m_EuclideanDistance\l# m_MinBoxRelWidth\l# m_MaxInstInLeaf\l- serialVersionUID\l|+ KDTree()\l+ KDTree()\l+ kNearestNeighbours()\l+ nearestNeighbour()\l+ getDistances()\l+ setInstances()\l+ update()\l+ addInstanceInfo()\l+ measureTreeSize()\l+ measureNumLeaves()\l+ measureMaxDepth()\l+ enumerateMeasures()\l+ getMeasure()\l+ setMeasurePerformance()\l+ centerInstances()\l+ assignSubToCenters()\l+ minBoxRelWidthTipText()\l+ setMinBoxRelWidth()\l+ getMinBoxRelWidth()\l+ maxInstInLeafTipText()\l+ setMaxInstInLeaf()\l+ getMaxInstInLeaf()\l+ normalizeNodeWidthTipText()\l+ setNormalizeNodeWidth()\l+ getNormalizeNodeWidth()\l+ getDistanceFunction()\l+ setDistanceFunction()\l+ nodeSplitterTipText()\l+ getNodeSplitter()\l+ setNodeSplitter()\l+ globalInfo()\l~ [instance initializer]()\l# buildKDTree()\l# splitNodes()\l# findNearestNeighbours()\l# addInstanceToTree()\l# afterAddInstance()\l# checkMissing()\l# checkMissing()\l# getMaxRelativeNodeWidth()\l# widestDim()\l# determineAssignments()\l# refineOwners()\l# distanceToHrect()\l# clipToInsideHrect()\l# candidateIsFullOwner()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.classifiers.lazy.neighboursearch.NearestNeighbourSearch\n|# m_Instances\l# m_kNN\l# m_DistanceFunction\l# m_MeasurePerformance\l|+ NearestNeighbourSearch()\l+ NearestNeighbourSearch()\l+ globalInfo()\l+ distanceFunctionTipText()\l+ getDistanceFunction()\l+ setDistanceFunction()\l+ measurePerformanceTipText()\l+ getMeasurePerformance()\l+ nearestNeighbour()\l+ kNearestNeighbours()\l+ getDistances()\l+ update()\l+ addInstanceInfo()\l+ setInstances()\l+ getInstances()\l+ combSort11()\l+ quickSort()\l# partition()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1lazy_1_1neighboursearch_1_1NearestNeighbourSearch.html",tooltip="Abstract class for nearest neighbour search."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node4 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_DistanceFunction",arrowtail="open",fontname="Helvetica"];
  Node4 [label="{moa.classifiers.lazy.neighboursearch.DistanceFunction\n||+ setInstances()\l+ getInstances()\l+ setAttributeIndices()\l+ getAttributeIndices()\l+ setInvertSelection()\l+ getInvertSelection()\l+ distance()\l+ distance()\l+ postProcessDistances()\l+ update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1classifiers_1_1lazy_1_1neighboursearch_1_1DistanceFunction.html",tooltip="Interface for any class that can compute and return distances between two instances..."];
  Node5 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_Instances",arrowtail="open",fontname="Helvetica"];
  Node5 [label="{Instances\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node6 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_EuclideanDistance",arrowtail="open",fontname="Helvetica"];
  Node6 [label="{moa.classifiers.lazy.neighboursearch.EuclideanDistance\n|- serialVersionUID\l|+ EuclideanDistance()\l+ EuclideanDistance()\l+ globalInfo()\l+ distance()\l+ postProcessDistances()\l+ sqDifference()\l+ getMiddle()\l+ closestPoint()\l+ valueIsSmallerEqual()\l# updateDistance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1lazy_1_1neighboursearch_1_1EuclideanDistance.html",tooltip="Implementing Euclidean distance (or similarity) function."];
  Node7 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.classifiers.lazy.neighboursearch.NormalizableDistance\n|+ R_MIN\l+ R_MAX\l+ R_WIDTH\l# m_Data\l# m_DontNormalize\l# m_Ranges\l# m_ActiveIndices\l# m_Validated\l|+ NormalizableDistance()\l+ NormalizableDistance()\l+ globalInfo()\l+ dontNormalizeTipText()\l+ setDontNormalize()\l+ getDontNormalize()\l+ attributeIndicesTipText()\l+ setAttributeIndices()\l+ getAttributeIndices()\l+ invertSelectionTipText()\l+ setInvertSelection()\l+ getInvertSelection()\l+ setInstances()\l+ getInstances()\l+ postProcessDistances()\l+ update()\l+ distance()\l+ distance()\l+ initializeRanges()\l+ updateRangesFirst()\l+ updateRanges()\l+ initializeRangesEmpty()\l+ updateRanges()\l+ initializeRanges()\l+ initializeRanges()\l+ updateRanges()\l+ inRanges()\l+ rangesSet()\l+ getRanges()\l+ toString()\l+ isMissingValue()\l# invalidate()\l# validate()\l# initialize()\l# initializeAttributeIndices()\l# updateDistance()\l# norm()\l# difference()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1lazy_1_1neighboursearch_1_1NormalizableDistance.html",tooltip="Represents the abstract ancestor for normalizable distance functions, like Euclidean..."];
  Node4 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 -> Node7 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_Data",arrowtail="open",fontname="Helvetica"];
  Node8 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_Splitter",arrowtail="open",fontname="Helvetica"];
  Node8 [label="{moa.classifiers.lazy.neighboursearch.kdtrees.KDTreeNodeSplitter\n|+ MIN\l+ MAX\l+ WIDTH\l# m_Instances\l# m_EuclideanDistance\l# m_InstList\l# m_NormalizeNodeWidth\l|+ KDTreeNodeSplitter()\l+ KDTreeNodeSplitter()\l+ listOptions()\l+ setOptions()\l+ getOptions()\l+ splitNode()\l+ setInstances()\l+ setInstanceList()\l+ setEuclideanDistanceFunction()\l+ setNodeWidthNormalization()\l# correctlyInitialized()\l# widestDim()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1lazy_1_1neighboursearch_1_1kdtrees_1_1KDTreeNodeSplitter.html",tooltip="Class that splits up a KDTreeNode."];
  Node3 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 -> Node8 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_EuclideanDistance",arrowtail="open",fontname="Helvetica"];
  Node5 -> Node8 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_Instances",arrowtail="open",fontname="Helvetica"];
  Node9 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_Root",arrowtail="open",fontname="Helvetica"];
  Node9 [label="{moa.classifiers.lazy.neighboursearch.kdtrees.KDTreeNode\n|+ m_NodeNumber\l+ m_Left\l+ m_Right\l+ m_SplitValue\l+ m_SplitDim\l+ m_NodeRanges\l+ m_NodesRectBounds\l+ m_Start\l+ m_End\l- serialVersionUID\l|+ KDTreeNode()\l+ KDTreeNode()\l+ KDTreeNode()\l+ getSplitDim()\l+ getSplitValue()\l+ isALeaf()\l+ numInstances()\l+ getRevision()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1lazy_1_1neighboursearch_1_1kdtrees_1_1KDTreeNode.html",tooltip="A class representing a KDTree node."];
  Node3 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{RevisionHandler\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node9 -> Node9 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="m_Right\nm_Left",arrowtail="open",fontname="Helvetica"];
}
