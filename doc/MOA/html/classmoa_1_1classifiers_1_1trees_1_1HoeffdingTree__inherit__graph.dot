digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.trees.HoeffdingTree\n|+ maxByteSizeOption\l+ numericEstimatorOption\l+ nominalEstimatorOption\l+ memoryEstimatePeriodOption\l+ gracePeriodOption\l+ splitCriterionOption\l+ splitConfidenceOption\l+ tieThresholdOption\l+ binarySplitsOption\l+ stopMemManagementOption\l+ removePoorAttsOption\l+ noPrePruneOption\l+ leafpredictionOption\l+ nbThresholdOption\l# treeRoot\l# decisionNodeCount\l# activeLeafNodeCount\l# inactiveLeafNodeCount\l# inactiveLeafByteSizeEstimate\l# activeLeafByteSizeEstimate\l# byteSizeEstimateOverheadFraction\l# growthAllowed\l- serialVersionUID\l|+ getPurposeString()\l+ calcByteSize()\l+ measureByteSize()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ measureTreeDepth()\l+ getModelDescription()\l+ isRandomizable()\l+ enforceTrackerLimit()\l+ estimateModelByteSizes()\l+ deactivateAllLeaves()\l+ computeHoeffdingBound()\l# getModelMeasurementsImpl()\l# newSplitNode()\l# newSplitNode()\l# newNominalClassObserver()\l# newNumericClassObserver()\l# attemptToSplit()\l# deactivateLearningNode()\l# activateLearningNode()\l# findLearningNodes()\l# findLearningNodes()\l# newLearningNode()\l# newLearningNode()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.classifiers.AbstractClassifier\n|+ randomSeedOption\l+ classifierRandom\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l|+ getPurposeString()\l+ AbstractClassifier()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClassifiers()\l+ copy()\l+ correctlyClassifies()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1AbstractClassifier.html",tooltip="Abstract Classifier."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.options.AbstractOptionHandler\n|# options\l# classOptionNamesToPreparedObjects\l- serialVersionUID\l|+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ getCLICreationString()\l+ copy()\l# prepareForUseImpl()\l# discoverOptionsViaReflection()\l# prepareClassOptions()\l# getPreparedClassOption()\l# getPreparedClassOption()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOptionHandler.html",tooltip="Abstract Option Handler."];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.AbstractMOAObject\n||+ copy()\l+ measureByteSize()\l+ toString()\l+ copy()\l+ measureByteSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1AbstractMOAObject.html",tooltip="Abstract MOA Object."];
  Node5 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node6 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node7 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.options.OptionHandler\n||+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ copy()\l+ getCLICreationString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1OptionHandler.html",tooltip="Interface representing an object that handles options or parameters."];
  Node5 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.classifiers.Classifier\n||+ setModelContext()\l+ getModelContext()\l+ isRandomizable()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getVotesForInstance()\l+ correctlyClassifies()\l+ getModelMeasurements()\l+ getSubClassifiers()\l+ copy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1classifiers_1_1Classifier.html",tooltip="Classifier interface for incremental classification models."];
  Node5 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.gui.AWTRenderable\n||+ getAWTRenderer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1gui_1_1AWTRenderable.html",tooltip="Interface representing a component that is renderable."];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.classifiers.multilabel.HoeffdingTreeClassifLeaves\n|+ learnerOption\l- serialVersionUID\l|+ HoeffdingTreeClassifLeaves()\l# newLearningNode()\l# newLearningNode()\l# attemptToSplit()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1multilabel_1_1HoeffdingTreeClassifLeaves.html",tooltip="Hoeffding Tree that have a classifier at the leaves."];
  Node10 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{moa.classifiers.multilabel.MultilabelHoeffdingTree\n|+ m_L\l# converter\l- serialVersionUID\l|+ setModelContext()\l+ MultilabelHoeffdingTree()\l+ getVotesForInstance()\l# newLearningNode()\l# newLearningNode()\l# deactivateLearningNode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1multilabel_1_1MultilabelHoeffdingTree.html",tooltip="Hoeffding Tree for classifying multi-label data."];
  Node1 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{moa.classifiers.trees.ASHoeffdingTree\n|# maxSize\l# resetTree\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ setMaxSize()\l+ setResetTree()\l+ deleteNode()\l+ resizeTree()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1ASHoeffdingTree.html",tooltip="Adaptive Size Hoeffding Tree used in Bagging using trees of different size."];
  Node1 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{moa.classifiers.trees.FIMTDD\n|+ PageHinckleyAlphaOption\l+ PageHinckleyThresholdOption\l+ AlternateTreeFadingFactorOption\l+ AlternateTreeTMinOption\l+ AlternateTreeTimeOption\l+ learningRatioOption\l+ learningRatio_Decay_or_Const_Option\l# splitRatioStatistics\l# nodesToAdapt\l# Adaptable\l# initLearnRate\l# learnRateDecay\l- serialVersionUID\l|+ getPurposeString()\l+ FIMTDD()\l+ trainOnInstanceImpl()\l# FIMTDD_attemptToSplit()\l# newLearningNode()\l# newLearningNode()\l# newSplitNode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1FIMTDD.html"];
  Node1 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{moa.classifiers.trees.HoeffdingAdaptiveTree\n|# alternateTrees\l# prunedAlternateTrees\l# switchedAlternateTrees\l- serialVersionUID\l|+ getPurposeString()\l+ trainOnInstanceImpl()\l+ filterInstanceToLeaves()\l+ getVotesForInstance()\l# newLearningNode()\l# newSplitNode()\l# newSplitNode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1HoeffdingAdaptiveTree.html",tooltip="Hoeffding Adaptive Tree for evolving data streams."];
  Node1 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{moa.classifiers.trees.LimAttHoeffdingTree\n|# listAttributes\l- serialVersionUID\l|+ getPurposeString()\l+ setlistAttributes()\l+ LimAttHoeffdingTree()\l+ isRandomizable()\l# newLearningNode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1LimAttHoeffdingTree.html",tooltip="Hoeffding decision trees with a restricted number of attributes for data streams..."];
  Node1 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{moa.classifiers.trees.RandomHoeffdingTree\n|- serialVersionUID\l|+ getPurposeString()\l+ RandomHoeffdingTree()\l+ isRandomizable()\l# newLearningNode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1RandomHoeffdingTree.html",tooltip="Random decision trees for data streams."];
}
