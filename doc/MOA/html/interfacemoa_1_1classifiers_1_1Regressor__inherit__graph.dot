digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.Regressor\n||}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.classifiers.functions.SGD\n|+ lambdaRegularizationOption\l+ learningRateOption\l+ lossFunctionOption\l# m_lambda\l# m_learningRate\l# m_weights\l# m_bias\l# m_t\l# m_numInstances\l# m_loss\l# HINGE\l# LOGLOSS\l# SQUAREDLOSS\l- serialVersionUID\l|+ getPurposeString()\l+ setLambda()\l+ getLambda()\l+ setLossFunction()\l+ getLossFunction()\l+ setLearningRate()\l+ getLearningRate()\l+ reset()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ toString()\l+ isRandomizable()\l# dloss()\l# getModelMeasurementsImpl()\l# dotProd()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1functions_1_1SGD.html",tooltip="Implements stochastic gradient descent for learning various linear models (binary..."];
  Node1 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.classifiers.functions.SGDMultiClass\n|+ lambdaRegularizationOption\l+ learningRateOption\l+ lossFunctionOption\l# m_lambda\l# m_learningRate\l# m_weights\l# m_bias\l# m_t\l# m_numInstances\l# m_loss\l# HINGE\l# LOGLOSS\l# SQUAREDLOSS\l- serialVersionUID\l|+ getPurposeString()\l+ setLambda()\l+ getLambda()\l+ setLossFunction()\l+ getLossFunction()\l+ setLearningRate()\l+ getLearningRate()\l+ reset()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ getModelDescription()\l+ toString()\l+ isRandomizable()\l# dloss()\l# getModelMeasurementsImpl()\l# dotProd()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1functions_1_1SGDMultiClass.html",tooltip="Implements stochastic gradient descent for learning various linear models (binary..."];
  Node1 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.classifiers.meta.RandomRules\n|+ baseLearnerOption\l+ ensembleSizeOption\l+ numAttributesPercentageOption\l+ useBaggingOption\l# ensemble\l# isRegression\l# listAttributes\l# numAttributes\l# dataset\l- serialVersionUID\l|+ getPurposeString()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ isRandomizable()\l+ getModelDescription()\l+ getSubClassifiers()\l# getModelMeasurementsImpl()\l- transformInstance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1meta_1_1RandomRules.html"];
  Node1 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.classifiers.rules.AMRulesRegressor\n|+ constantLearningRatioDecayOption\l+ learningRatioOption\l+ predictionFunctionOption\l+ votingTypeOption\l- serialVersionUID\l|+ newRuleActiveLearningNode()\l+ newRuleActiveLearningNode()\l+ getModelDescription()\l+ resetLearningImpl()\l+ isRandomizable()\l+ newErrorWeightedVote()\l# newRule()\l- newRule()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1AMRulesRegressor.html"];
  Node1 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.classifiers.rules.functions.Perceptron\n|+ constantLearningRatioDecayOption\l+ learningRatioOption\l+ learningRateDecayOption\l+ fadingFactorOption\l+ perceptronattributeStatistics\l+ squaredperceptronattributeStatistics\l# fadingFactor\l# learningRatio\l# learningRateDecay\l# weightAttribute\l# perceptronInstancesSeen\l# perceptronYSeen\l# accumulatedError\l# initialisePerceptron\l# perceptronsumY\l# squaredperceptronsumY\l- SD_THRESHOLD\l- nError\l- serialVersionUID\l|+ Perceptron()\l+ Perceptron()\l+ setWeights()\l+ getWeights()\l+ getInstancesSeen()\l+ setInstancesSeen()\l+ resetLearningImpl()\l+ reset()\l+ resetError()\l+ trainOnInstanceImpl()\l+ normalizedPrediction()\l+ prediction()\l+ normalizedInstance()\l+ computeSD()\l+ updateWeights()\l+ normalizeWeights()\l+ isRandomizable()\l+ getVotesForInstance()\l+ getModelDescription()\l+ setLearningRatio()\l+ getCurrentError()\l# getModelMeasurementsImpl()\l- prediction()\l- denormalizedPrediction()\l- normalizeActualClassValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1functions_1_1Perceptron.html"];
  Node1 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.classifiers.rules.functions.TargetMean\n|+ fadingErrorFactorOption\l# n\l# sum\l# errorSum\l# nError\l- fadingErrorFactor\l- serialVersionUID\l|+ isRandomizable()\l+ getVotesForInstance()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ reset()\l+ getCurrentError()\l+ TargetMean()\l+ TargetMean()\l+ resetError()\l# updateAccumulatedError()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1functions_1_1TargetMean.html"];
  Node7 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.classifiers.rules.functions.FadingTargetMean\n|+ fadingFactorOption\l- nD\l- fadingFactor\l- serialVersionUID\l|+ trainOnInstanceImpl()\l+ resetLearningImpl()\l+ getVotesForInstance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1functions_1_1FadingTargetMean.html"];
  Node1 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.classifiers.trees.FIMTDD\n|+ PageHinckleyAlphaOption\l+ PageHinckleyThresholdOption\l+ AlternateTreeFadingFactorOption\l+ AlternateTreeTMinOption\l+ AlternateTreeTimeOption\l+ learningRatioOption\l+ learningRatio_Decay_or_Const_Option\l# splitRatioStatistics\l# nodesToAdapt\l# Adaptable\l# initLearnRate\l# learnRateDecay\l- serialVersionUID\l|+ getPurposeString()\l+ FIMTDD()\l+ trainOnInstanceImpl()\l# FIMTDD_attemptToSplit()\l# newLearningNode()\l# newLearningNode()\l# newSplitNode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1FIMTDD.html"];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.classifiers.trees.ORTO\n|+ maxID\l+ PageHinckleyAlphaOption\l+ PageHinckleyThresholdOption\l+ AlternateTreeFadingFactorOption\l+ AlternateTreeTMinOption\l+ AlternateTreeTimeOption\l+ LearningRatioOption\l+ LearningRatioDecayOrConstOption\l+ MaxTreesOption\l+ MaxOptionLevelOption\l+ OptionDecayFactorOption\l+ splitCriterionOption\l+ numericEstimatorOption\l+ gracePeriodOption\l+ splitConfidenceOption\l+ tieThresholdOption\l+ removePoorAttsOption\l+ OptionNodeAggregationOption\l+ OptionFadingFactorOption\l# treeRoot\l# maxDepth\l# inactiveLeafByteSizeEstimate\l# activeLeafByteSizeEstimate\l# byteSizeEstimateOverheadFraction\l# nodesToAdapt\l# Adaptable\l# initLearnRate\l# learnRateDecay\l- leafNodeCount\l- innerNodeCount\l- optionNodeCount\l- numTrees\l- learnTime\l- predictTime\l- serialVersionUID\l|+ getPurposeString()\l+ ORTO()\l+ resetLearningImpl()\l+ isRandomizable()\l+ calcByteSize()\l+ getModelDescription()\l+ getVotesForInstance()\l+ trainOnInstanceImpl()\l+ computeHoeffdingBound()\l# checkRoot()\l# getModelMeasurementsImpl()\l# newNumericClassObserver()\l# findWorstOption()\l# removeExcessTrees()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1trees_1_1ORTO.html"];
}
