digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.lazy.neighboursearch.NearestNeighbourSearch\n|# m_Instances\l# m_kNN\l# m_DistanceFunction\l# m_MeasurePerformance\l|+ NearestNeighbourSearch()\l+ NearestNeighbourSearch()\l+ globalInfo()\l+ distanceFunctionTipText()\l+ getDistanceFunction()\l+ setDistanceFunction()\l+ measurePerformanceTipText()\l+ getMeasurePerformance()\l+ nearestNeighbour()\l+ kNearestNeighbours()\l+ getDistances()\l+ update()\l+ addInstanceInfo()\l+ setInstances()\l+ getInstances()\l+ combSort11()\l+ quickSort()\l# partition()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node1 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.classifiers.lazy.neighboursearch.KDTree\n|+ MIN\l+ MAX\l+ WIDTH\l~ m_NormalizeNodeWidth\l# m_DistanceList\l# m_InstList\l# m_Root\l# m_Splitter\l# m_NumNodes\l# m_NumLeaves\l# m_MaxDepth\l# m_EuclideanDistance\l# m_MinBoxRelWidth\l# m_MaxInstInLeaf\l- serialVersionUID\l|+ KDTree()\l+ KDTree()\l+ kNearestNeighbours()\l+ nearestNeighbour()\l+ getDistances()\l+ setInstances()\l+ update()\l+ addInstanceInfo()\l+ measureTreeSize()\l+ measureNumLeaves()\l+ measureMaxDepth()\l+ enumerateMeasures()\l+ getMeasure()\l+ setMeasurePerformance()\l+ centerInstances()\l+ assignSubToCenters()\l+ minBoxRelWidthTipText()\l+ setMinBoxRelWidth()\l+ getMinBoxRelWidth()\l+ maxInstInLeafTipText()\l+ setMaxInstInLeaf()\l+ getMaxInstInLeaf()\l+ normalizeNodeWidthTipText()\l+ setNormalizeNodeWidth()\l+ getNormalizeNodeWidth()\l+ getDistanceFunction()\l+ setDistanceFunction()\l+ nodeSplitterTipText()\l+ getNodeSplitter()\l+ setNodeSplitter()\l+ globalInfo()\l~ [instance initializer]()\l# buildKDTree()\l# splitNodes()\l# findNearestNeighbours()\l# addInstanceToTree()\l# afterAddInstance()\l# checkMissing()\l# checkMissing()\l# getMaxRelativeNodeWidth()\l# widestDim()\l# determineAssignments()\l# refineOwners()\l# distanceToHrect()\l# clipToInsideHrect()\l# candidateIsFullOwner()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1lazy_1_1neighboursearch_1_1KDTree.html",tooltip="Class implementing the KDTree search algorithm for nearest neighbour search."];
  Node1 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.classifiers.lazy.neighboursearch.LinearNNSearch\n|# m_Distances\l# m_SkipIdentical\l- serialVersionUID\l|+ LinearNNSearch()\l+ LinearNNSearch()\l+ globalInfo()\l+ skipIdenticalTipText()\l+ setSkipIdentical()\l+ getSkipIdentical()\l+ nearestNeighbour()\l+ kNearestNeighbours()\l+ getDistances()\l+ setInstances()\l+ update()\l+ addInstanceInfo()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1lazy_1_1neighboursearch_1_1LinearNNSearch.html",tooltip="Class implementing the brute force search algorithm for nearest neighbour search..."];
}
