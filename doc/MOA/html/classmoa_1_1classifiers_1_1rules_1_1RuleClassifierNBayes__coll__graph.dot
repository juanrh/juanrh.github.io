digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.rules.RuleClassifierNBayes\n|+ nbThresholdOption\l- serialVersionUID\l|+ getVotesForInstance()\l# firstHitNB()\l# weightedMaxNB()\l# weightedSumNB()\l# normalize()\l# exponential()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.classifiers.rules.RuleClassifier\n|+ PminOption\l+ splitConfidenceOption\l+ tieThresholdOption\l+ anomalyProbabilityThresholdOption\l+ probabilityThresholdOption\l+ anomalyNumInstThresholdOption\l+ gracePeriodOption\l+ predictionFunctionOption\l+ orderedRulesOption\l+ anomalyDetectionOption\l+ Supervised\l+ Unsupervised\l~ minEntropyTemp\l~ cutPointTemp\l~ minEntropyNominalAttrib\l~ symbol\l~ numInstance\l~ numAttributes\l~ numClass\l~ root\l~ pred\l# instance\l# attributeObservers\l# attributeObserversGauss\l# observedClassDistribution\l# saveBestEntropy\l# saveBestEntropyNominalAttrib\l# ruleClassIndex\l# saveBestGlobalEntropy\l# saveBestValGlobalEntropy\l# saveTheBest\l# ruleSet\l# ruleSetAnomalies\l# ruleAnomaliesIndex\l# caseAnomaly\l# ruleAttribAnomalyStatistics\l# ruleSetAnomaliesSupervised\l# ruleAnomaliesIndexSupervised\l# caseAnomalySupervised\l# ruleAttribAnomalyStatisticsSupervised\l- serialVersionUID\l|+ getPurposeString()\l+ getVotesForInstance()\l+ resetLearningImpl()\l+ getWeightSeen()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ printAnomaliesUnsupervised()\l+ printAnomaliesSupervised()\l+ getModelDescriptionNoAnomalyDetection()\l+ isRandomizable()\l+ getCountNominalAttrib()\l+ initializeRuleStatistics()\l+ updateRuleAttribStatistics()\l+ computeAnomalyUnsupervised()\l+ computeAnomalySupervised()\l+ computeMean()\l+ computeSD()\l+ computeProbability()\l+ createRule()\l+ expandeRule()\l+ theBestAttributes()\l+ entropy()\l+ findBestValEntropy()\l+ mainFindBestValEntropy()\l+ findBestValEntropyNominalAtt()\l+ ComputeHoeffdingBound()\l+ checkBestAttrib()\l+ manageMemory()\l# getModelMeasurementsImpl()\l# round()\l# getBestSecondBestEntropy()\l# getRuleMajorityClassIndex()\l# oberversDistribProb()\l# firstHit()\l# weightedMax()\l# weightedSum()\l# newNominalClassObserver()\l# newNumericClassObserver()\l# newNumericClassObserver2()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1RuleClassifier.html",tooltip="This classifier learn ordered and unordered rule set from data stream."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.classifiers.AbstractClassifier\n|+ randomSeedOption\l+ classifierRandom\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l|+ getPurposeString()\l+ AbstractClassifier()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClassifiers()\l+ copy()\l+ correctlyClassifies()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1AbstractClassifier.html",tooltip="Abstract Classifier."];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.options.AbstractOptionHandler\n|# options\l# classOptionNamesToPreparedObjects\l- serialVersionUID\l|+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ getCLICreationString()\l+ copy()\l# prepareForUseImpl()\l# discoverOptionsViaReflection()\l# prepareClassOptions()\l# getPreparedClassOption()\l# getPreparedClassOption()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOptionHandler.html",tooltip="Abstract Option Handler."];
  Node5 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.AbstractMOAObject\n||+ copy()\l+ measureByteSize()\l+ toString()\l+ copy()\l+ measureByteSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1AbstractMOAObject.html",tooltip="Abstract MOA Object."];
  Node6 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node7 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node8 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.options.OptionHandler\n||+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ copy()\l+ getCLICreationString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1OptionHandler.html",tooltip="Interface representing an object that handles options or parameters."];
  Node6 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 -> Node4 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="classOptionNamesToPreparedObjects",arrowtail="open",fontname="Helvetica"];
  Node9 [label="{Map\< String, Object \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node10 -> Node4 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="options",arrowtail="open",fontname="Helvetica"];
  Node10 [label="{moa.options.Options\n|# optionList\l- serialVersionUID\l|+ addOption()\l+ numOptions()\l+ getOption()\l+ getOption()\l+ getOptionArray()\l+ removeOption()\l+ removeOption()\l+ removeAllOptions()\l+ resetToDefaults()\l+ setViaCLIString()\l+ getAsCLIString()\l+ getHelpString()\l+ getHelp()\l+ getDescription()\l# splitParameterFromRemainingOptions()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1Options.html",tooltip="File option."];
  Node5 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 -> Node10 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="optionList",arrowtail="open",fontname="Helvetica"];
  Node11 [label="{List\< Option \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node12 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{moa.classifiers.Classifier\n||+ setModelContext()\l+ getModelContext()\l+ isRandomizable()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getVotesForInstance()\l+ correctlyClassifies()\l+ getModelMeasurements()\l+ getSubClassifiers()\l+ copy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1classifiers_1_1Classifier.html",tooltip="Classifier interface for incremental classification models."];
  Node6 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{moa.gui.AWTRenderable\n||+ getAWTRenderer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1gui_1_1AWTRenderable.html",tooltip="Interface representing a component that is renderable."];
  Node14 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="randomSeedOption",arrowtail="open",fontname="Helvetica"];
  Node14 [label="{moa.options.IntOption\n|# currentVal\l# defaultVal\l# minVal\l# maxVal\l- serialVersionUID\l|+ IntOption()\l+ IntOption()\l+ setValue()\l+ getValue()\l+ getMinValue()\l+ getMaxValue()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getEditComponent()\l+ cliStringToInt()\l+ intToCLIString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1IntOption.html",tooltip="Int option."];
  Node15 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{moa.options.AbstractOption\n|+ illegalNameCharacters\l# name\l# cliChar\l# purpose\l|+ AbstractOption()\l+ getName()\l+ getCLIChar()\l+ getPurpose()\l+ resetToDefault()\l+ getStateString()\l+ copy()\l+ getDescription()\l+ getEditComponent()\l+ nameIsLegal()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOption.html",tooltip="Abstract option."];
  Node5 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{moa.options.Option\n||+ getName()\l+ getCLIChar()\l+ getPurpose()\l+ getDefaultCLIString()\l+ setValueViaCLIString()\l+ getValueAsCLIString()\l+ resetToDefault()\l+ getStateString()\l+ copy()\l+ getEditComponent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1Option.html",tooltip="Interface representing an option or parameter."];
  Node6 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="modelContext",arrowtail="open",fontname="Helvetica"];
  Node17 [label="{moa.core.InstancesHeader\n|- serialVersionUID\l|+ InstancesHeader()\l+ add()\l+ readInstance()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getNumericValueString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1InstancesHeader.html",tooltip="Class for storing the header or context of a data stream."];
  Node18 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node18 [label="{Instances\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node19 -> Node3 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="classifierRandom",arrowtail="open",fontname="Helvetica"];
  Node19 [label="{Random\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node20 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="pred",arrowtail="open",fontname="Helvetica"];
  Node20 [label="{moa.classifiers.rules.Predicates\n|- attributeValue\l- symbol\l- value\l- serialVersionUID\l|+ Predicates()\l+ getAttributeValue()\l+ getSymbol()\l+ getValue()\l+ setAttributeValue()\l+ setSymbol()\l+ setValue()\l+ evaluate()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1Predicates.html"];
  Node5 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node21 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="tieThresholdOption\nprobabilityThresholdOption\nanomalyProbabilityThresholdOption\nsplitConfidenceOption\nPminOption",arrowtail="open",fontname="Helvetica"];
  Node21 [label="{moa.options.FloatOption\n|# currentVal\l# defaultVal\l# minVal\l# maxVal\l- serialVersionUID\l|+ FloatOption()\l+ FloatOption()\l+ setValue()\l+ getValue()\l+ getMinValue()\l+ getMaxValue()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getEditComponent()\l+ cliStringToDouble()\l+ doubleToCLIString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1FloatOption.html",tooltip="Float option."];
  Node15 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node22 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="root",arrowtail="open",fontname="Helvetica"];
  Node22 [label="{moa.classifiers.core.attributeclassobservers.BinaryTreeNumericAttributeClassObserver.Node\n|+ cut_point\l+ classCountsLeft\l+ classCountsRight\l+ left\l+ right\l- serialVersionUID\l|+ Node()\l+ insertValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1core_1_1attributeclassobservers_1_1BinaryTreeNumericAttributeClassObserver_1_1Node.html"];
  Node7 -> Node22 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node22 -> Node22 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="right\nleft",arrowtail="open",fontname="Helvetica"];
  Node23 -> Node22 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="classCountsLeft\nclassCountsRight",arrowtail="open",fontname="Helvetica"];
  Node23 [label="{moa.core.DoubleVector\n|# array\l- serialVersionUID\l|+ DoubleVector()\l+ DoubleVector()\l+ DoubleVector()\l+ numValues()\l+ setValue()\l+ addToValue()\l+ addValues()\l+ addValues()\l+ subtractValues()\l+ subtractValues()\l+ addToValues()\l+ scaleValues()\l+ getValue()\l+ sumOfValues()\l+ maxIndex()\l+ normalize()\l+ numNonZeroEntries()\l+ minWeight()\l+ getArrayCopy()\l+ getArrayRef()\l+ getSingleLineDescription()\l+ getSingleLineDescription()\l+ getDescription()\l# setArrayLength()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1core_1_1DoubleVector.html",tooltip="Vector of double numbers with some utilities."];
  Node5 -> Node23 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node24 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="caseAnomaly\ncaseAnomalySupervised",arrowtail="open",fontname="Helvetica"];
  Node24 [label="{ArrayList\< ArrayList\< Integer \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node25 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="saveBestValGlobalEntropy",arrowtail="open",fontname="Helvetica"];
  Node25 [label="{ArrayList\< ArrayList\< Double \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node26 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="ruleAttribAnomalyStatisticsSupervised\nruleAttribAnomalyStatistics",arrowtail="open",fontname="Helvetica"];
  Node26 [label="{ArrayList\< ArrayList\< ArrayList\< Double \> \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node27 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="ruleAnomaliesIndex\nruleAnomaliesIndexSupervised",arrowtail="open",fontname="Helvetica"];
  Node27 [label="{ArrayList\< Integer \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node14 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="anomalyNumInstThresholdOption\ngracePeriodOption",arrowtail="open",fontname="Helvetica"];
  Node28 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="saveTheBest",arrowtail="open",fontname="Helvetica"];
  Node28 [label="{ArrayList\< Double \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node23 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="saveBestGlobalEntropy\nsaveBestEntropy\nruleClassIndex\nsaveBestEntropyNominalAttrib\nobservedClassDistribution",arrowtail="open",fontname="Helvetica"];
  Node29 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="attributeObserversGauss\nattributeObservers",arrowtail="open",fontname="Helvetica"];
  Node29 [label="{AutoExpandVector\< AttributeClassObserver \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node30 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="Unsupervised\nSupervised\nanomalyDetectionOption\norderedRulesOption",arrowtail="open",fontname="Helvetica"];
  Node30 [label="{moa.options.FlagOption\n|# isSet\l- serialVersionUID\l|+ FlagOption()\l+ setValue()\l+ set()\l+ unset()\l+ isSet()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ getStateString()\l+ getEditComponent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1FlagOption.html",tooltip="Flag option."];
  Node15 -> Node30 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node31 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="ruleSetAnomalies\nruleSetAnomaliesSupervised\nruleSet",arrowtail="open",fontname="Helvetica"];
  Node31 [label="{ArrayList\< RuleClassification \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node32 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="predictionFunctionOption",arrowtail="open",fontname="Helvetica"];
  Node32 [label="{moa.options.MultiChoiceOption\n|# optionLabels\l# optionDescriptions\l# defaultOptionIndex\l# chosenOptionIndex\l- serialVersionUID\l|+ MultiChoiceOption()\l+ getDefaultCLIString()\l+ getValueAsCLIString()\l+ setValueViaCLIString()\l+ setChosenLabel()\l+ setChosenIndex()\l+ getOptionLabels()\l+ getChosenLabel()\l+ getChosenIndex()\l+ getEditComponent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1MultiChoiceOption.html",tooltip="Multi choice option."];
  Node15 -> Node32 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node33 -> Node2 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="instance",arrowtail="open",fontname="Helvetica"];
  Node33 [label="{Instance\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node14 -> Node1 [dir=back,color="darkorchid3",fontsize="10",style="dashed",label="nbThresholdOption",arrowtail="open",fontname="Helvetica"];
}
