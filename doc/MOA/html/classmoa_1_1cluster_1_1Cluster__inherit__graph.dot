digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.cluster.Cluster\n|- id\l- gtLabel\l- measure_values\l- serialVersionUID\l|+ Cluster()\l+ getCenter()\l+ getWeight()\l+ getInclusionProbability()\l+ getDescription()\l+ setId()\l+ getId()\l+ isGroundTruth()\l+ setGroundTruth()\l+ getGroundTruth()\l+ sample()\l+ setMeasureValue()\l+ setMeasureValue()\l+ getMeasureValue()\l+ getInfo()\l# getClusterSpecificInfo()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.AbstractMOAObject\n||+ copy()\l+ measureByteSize()\l+ toString()\l+ copy()\l+ measureByteSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1AbstractMOAObject.html",tooltip="Abstract MOA Object."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node1 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.cluster.SphereCluster\n|- center\l- radius\l- weight\l- serialVersionUID\l|+ SphereCluster()\l+ SphereCluster()\l+ SphereCluster()\l+ SphereCluster()\l+ SphereCluster()\l+ overlapRadiusDegree()\l+ combine()\l+ merge()\l+ getCenter()\l+ setCenter()\l+ getRadius()\l+ setRadius()\l+ getWeight()\l+ setWeight()\l+ getInclusionProbability()\l+ getCenterDistance()\l+ getCenterDistance()\l+ getHullDistance()\l+ overlapSave()\l+ getDistanceVector()\l+ getDistanceVector()\l+ sample()\l# getClusterSpecificInfo()\l- distance()\l- distanceVector()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1cluster_1_1SphereCluster.html",tooltip="A simple implementation of the Cluster interface representing spherical clusters..."];
  Node5 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.cluster.CFCluster\n|+ LS\l+ SS\l# radiusFactor\l# N\l- serialVersionUID\l|+ CFCluster()\l+ CFCluster()\l+ CFCluster()\l+ add()\l+ getCF()\l+ getCenter()\l+ getInclusionProbability()\l+ getRadius()\l+ getWeight()\l+ setN()\l+ getN()\l+ addVectors()\l# CFCluster()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1cluster_1_1CFCluster.html"];
  Node6 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.clusterers.clustream.ClustreamKernel\n|+ MIN_VARIANCE\l~ m\l~ t\l# LST\l# SST\l- serialVersionUID\l- EPSILON\l|+ ClustreamKernel()\l+ ClustreamKernel()\l+ insert()\l+ add()\l+ getRelevanceStamp()\l+ getRadius()\l+ getCF()\l+ getCenter()\l+ getInclusionProbability()\l+ isEmpty()\l+ inverseError()\l# getClusterSpecificInfo()\l- getMuTime()\l- getSigmaTime()\l- getQuantile()\l- getDeviation()\l- getVarianceVector()\l- calcNormalizedDistance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1clustream_1_1ClustreamKernel.html"];
  Node6 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.clusterers.clustree.ClusKernel\n|+ EPSILON\l+ MIN_VARIANCE\l- totalN\l|+ ClusKernel()\l+ add()\l+ calcDistance()\l+ getWeight()\l+ getCF()\l+ getCenter()\l+ getInclusionProbability()\l+ getRadius()\l+ getVarianceVector()\l# ClusKernel()\l# ClusKernel()\l# aggregate()\l# makeOlder()\l# isEmpty()\l# clear()\l# overwriteOldCluster()\l- getTotalN()\l- getDeviation()\l- calcNormalizedDistance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1clustree_1_1ClusKernel.html",tooltip="Representation of an Entry in the tree."];
  Node6 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.clusterers.denstream.MicroCluster\n|- lastEditT\l- creationTimestamp\l- lambda\l- currentTimestamp\l|+ MicroCluster()\l+ MicroCluster()\l+ insert()\l+ getLastEditTimestamp()\l+ getWeight()\l+ getCreationTime()\l+ getCenter()\l+ getRadius()\l+ getRadius()\l+ copy()\l+ getInclusionProbability()\l+ getCF()\l- calcCF2()\l- calcCF1()\l- getWeight()\l- getCenter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1denstream_1_1MicroCluster.html"];
  Node6 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.clusterers.macro.NonConvexCluster\n|~ mMicroClusters\l- serialVersionUID\l|+ NonConvexCluster()\l+ getCF()\l+ insert()\l+ remove()\l+ getInclusionProbability()\l+ getRadius()\l+ getClustering()\l+ getMicroClusters()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1macro_1_1NonConvexCluster.html"];
}
