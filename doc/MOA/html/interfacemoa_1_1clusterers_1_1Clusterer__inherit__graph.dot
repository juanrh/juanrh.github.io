digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.clusterers.Clusterer\n||+ setModelContext()\l+ getModelContext()\l+ isRandomizable()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getVotesForInstance()\l+ getModelMeasurements()\l+ getSubClusterers()\l+ copy()\l+ getClusteringResult()\l+ implementsMicroClusterer()\l+ getMicroClusteringResult()\l+ keepClassLabel()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node4 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.options.OptionHandler\n||+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ copy()\l+ getCLICreationString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1OptionHandler.html",tooltip="Interface representing an object that handles options or parameters."];
  Node2 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.gui.AWTRenderable\n||+ getAWTRenderer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1gui_1_1AWTRenderable.html",tooltip="Interface representing a component that is renderable."];
  Node1 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.clusterers.AbstractClusterer\n|+ evaluateMicroClusteringOption\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l# randomSeedOption\l# clustererRandom\l# clustering\l|+ getPurposeString()\l+ AbstractClusterer()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClusterers()\l+ copy()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ implementsMicroClusterer()\l+ keepClassLabel()\l+ getMicroClusteringResult()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1AbstractClusterer.html"];
  Node6 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.clusterers.ClusterGenerator\n|+ timeWindowOption\l+ radiusDecreaseOption\l+ radiusIncreaseOption\l+ positionOffsetOption\l+ clusterRemoveOption\l+ joinClustersOption\l+ clusterAddOption\l- points\l- instanceCounter\l- windowCounter\l- random\l- sourceClustering\l- serialVersionUID\l- err_intervall_width\l|+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ implementsMicroClusterer()\l+ setSourceClustering()\l+ getMicroClusteringResult()\l+ getClusteringResult()\l+ getModelDescription()\l+ isRandomizable()\l+ keepClassLabel()\l+ getVotesForInstance()\l# getModelMeasurementsImpl()\l- alterClustering()\l- joinClusters()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1ClusterGenerator.html"];
  Node6 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.clusterers.clustream.Clustream\n|+ timeWindowOption\l+ maxNumKernelsOption\l+ kernelRadiFactorOption\l- timeWindow\l- timestamp\l- kernels\l- initialized\l- buffer\l- bufferSize\l- t\l- m\l- serialVersionUID\l|+ Clustream()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getMicroClusteringResult()\l+ implementsMicroClusterer()\l+ getClusteringResult()\l+ getName()\l+ getModelDescription()\l+ isRandomizable()\l+ getVotesForInstance()\l+ kMeans()\l+ kMeans()\l# getModelMeasurementsImpl()\l- distance()\l- calculateCenter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1clustream_1_1Clustream.html",tooltip="Citation: CluStream: Charu C."];
  Node6 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.clusterers.clustream.WithKmeans\n|+ timeWindowOption\l+ maxNumKernelsOption\l+ kernelRadiFactorOption\l+ kOption\l- timeWindow\l- timestamp\l- kernels\l- initialized\l- buffer\l- bufferSize\l- t\l- m\l- serialVersionUID\l|+ WithKmeans()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getMicroClusteringResult()\l+ getClusteringResult()\l+ getClusteringResult()\l+ getName()\l+ implementsMicroClusterer()\l+ isRandomizable()\l+ getVotesForInstance()\l+ getModelDescription()\l+ kMeans_gta()\l+ kMeans_rand()\l# getModelMeasurementsImpl()\l# kMeans()\l# cleanUpKMeans()\l- distance()\l- calculateCenter()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1clustream_1_1WithKmeans.html"];
  Node6 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.clusterers.clustree.ClusTree\n|+ horizonOption\l+ maxHeightOption\l# root\l# negLambda\l# maxHeight\l# breadthFirstStrat\l- numberDimensions\l- height\l- numRootSplits\l- weightThreshold\l- numberInsertions\l- timestamp\l- alsoUpdate\l- serialVersionUID\l- INSERTIONS_BETWEEN_CLEANUPS\l|+ resetLearningImpl()\l+ isRandomizable()\l+ getModelDescription()\l+ getVotesForInstance()\l+ implementsMicroClusterer()\l+ trainOnInstanceImpl()\l+ insert()\l+ getNumRootSplits()\l+ getHeight()\l+ getMicroClusteringResult()\l+ getClusteringResult()\l+ getClustering()\l# getDefaultHeight()\l# getModelMeasurementsImpl()\l- insertBreadthFirst()\l- existsOutdatedEntryOnPath()\l- updateToTop()\l- insertHereWithSplit()\l- insertHere()\l- findBestLeafNode()\l- collectLeafNodes()\l- insert()\l- mergeEntryWithoutSplit()\l- calculateBestMergeInNode()\l- hasMaximalSize()\l- split()\l- cleanUp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1clustree_1_1ClusTree.html",tooltip="Citation: ClusTree: Philipp Kranen, Ira Assent, Corinna Baldauf, Thomas Seidl: The..."];
  Node10 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{moa.clusterers.outliers.AnyOut.AnyOutCore\n|+ trainingSetSizeOption\l+ oScoreKOption\l+ confKOption\l+ confidenceChoiceOption\l+ UseMeanScoreOption\l+ threshholdOption\l- aggregatedOScoreResult\l- lastOScoreResult\l- lastConfidenceResult\l- objectAsKernel\l- previousOScoreResultList\l- descendToNode\l- currentLevel\l- threshold\l- weightThreshold\l- oScoreK\l- confK\l|+ AnyOutCore()\l+ resetLearning()\l+ train()\l+ initObject()\l+ learnObject()\l+ removeObject()\l+ moreImprovementsPossible()\l+ improveObjectOnce()\l+ isOutlier()\l+ getOutlierScore()\l+ getConfidence()\l- getDensityOutlierScore()\l- useAggregatedOScoreResults()\l- calcC1()\l- calcC2()\l- calcC3()\l- updateConfidence()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1AnyOut_1_1AnyOutCore.html"];
  Node6 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{moa.clusterers.CobWeb\n|+ acuityOption\l+ cutoffOption\l+ randomSeedOption\l+ classifierPurposeString\l# m_acuity\l# m_cutoff\l# m_cobwebTree\l# m_numberOfClusters\l# m_numberOfClustersDetermined\l# m_numberSplits\l# m_numberMerges\l# m_saveInstances\l# m_normal\l- serialVersionUID\l|+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getVotesForInstance()\l+ numberOfClusters()\l+ getModelDescription()\l+ isRandomizable()\l+ graph()\l+ setAcuity()\l+ getAcuity()\l+ setCutoff()\l+ getCutoff()\l+ getSaveInstanceData()\l+ setSaveInstanceData()\l+ getClusteringResult()\l~ [instance initializer]()\l# determineNumberOfClusters()\l# getModelMeasurementsImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1CobWeb.html",tooltip="Class implementing the Cobweb and Classit clustering algorithms."];
  Node6 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{moa.clusterers.denstream.WithDBSCAN\n|+ horizonOption\l+ epsilonOption\l+ betaOption\l+ muOption\l+ initPointsOption\l+ offlineOption\l+ lambdaOption\l+ speedOption\l~ lambda\l~ epsilon\l~ minPoints\l~ mu\l~ beta\l~ p_micro_cluster\l~ o_micro_cluster\l~ initBuffer\l~ initialized\l~ currentTimestamp\l~ tp\l# numInitPoints\l# numProcessedPerUnit\l# processingSpeed\l- weightThreshold\l- timestamp\l- serialVersionUID\l|+ resetLearningImpl()\l+ initialDBScan()\l+ trainOnInstanceImpl()\l+ getClusteringResult()\l+ implementsMicroClusterer()\l+ getMicroClusteringResult()\l+ getModelDescription()\l+ isRandomizable()\l+ getVotesForInstance()\l+ getParameterString()\l# getModelMeasurementsImpl()\l- expandCluster()\l- getNeighbourhoodIDs()\l- nearestCluster()\l- distance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1denstream_1_1WithDBSCAN.html"];
  Node6 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{moa.clusterers.outliers.MyBaseOutlierDetector\n|+ windowSizeOption\l+ outlierNotifier\l+ bStopAlgorithm\l# random\l# iMaxMemUsage\l# nRangeQueriesExecuted\l# nTotalRunTime\l# nTimePerObj\l# myProgressInfo\l# myOut\l# bTrace\l# bShowProgress\l- myClusters\l- outliersFound\l- m_timePreObjSum\l- nProcessed\l- _msPrev\l- _msNow\l- m_timePreObjInterval\l|+ getTimePerObj()\l+ getObjectInfo()\l+ getStatistics()\l+ getInstanceValues()\l+ PrintInstance()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ processNewInstanceImpl()\l+ PrintOutliers()\l+ GetOutliersFound()\l+ getClusteringResult()\l+ getOutliersResult()\l+ implementsMicroClusterer()\l+ getMicroClusteringResult()\l+ getModelDescription()\l+ isRandomizable()\l+ keepClassLabel()\l+ getVotesForInstance()\l+ SetShowProgress()\l+ SetTrace()\l+ SetProgressInterval()\l+ SetMessagePrinter()\l+ SetUserInfo()\l# UpdateMaxMemUsage()\l# Init()\l# ProcessNewStreamObj()\l# IsNodeIdInWin()\l# AddOutlier()\l# RemoveExpiredOutlier()\l# RemoveOutlier()\l# getModelMeasurementsImpl()\l# ShowProgress()\l# ShowProgress()\l# Println()\l# Print()\l# Printf()\l# GetMemoryUsage()\l- ShowTimePerObj()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1MyBaseOutlierDetector.html"];
  Node14 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{moa.clusterers.outliers.AbstractC.AbstractCBase\n|+ m_nBothInlierOutlier\l+ m_nOnlyInlier\l+ m_nOnlyOutlier\l# objId\l# windowNodes\l# ISB\l# m_WindowSize\l# m_radius\l# m_Fraction\l# bWarning\l# FIRST_OBJ_ID\l|+ getObjectInfo()\l+ getStatistics()\l+ Print_lt_cnt()\l~ GetWindowEnd()\l~ GetWindowStart()\l~ IsWinFull()\l~ GetExpirationTime()\l~ AddNode()\l~ RemoveNode()\l~ GetExpiredNode()\l~ SaveOutlier()\l~ RemoveOutlier()\l~ PrintWindow()\l~ PrintNode()\l# IsNodeIdInWin()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1AbstractC_1_1AbstractCBase.html"];
  Node15 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{moa.clusterers.outliers.AbstractC.AbstractC\n|+ radiusOption\l+ kOption\l+ waitWinFullOption\l|+ AbstractC()\l+ Init()\l~ UpdateNeighbors()\l~ OutputPatterns()\l# ProcessNewStreamObj()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1AbstractC_1_1AbstractC.html"];
  Node14 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 [label="{moa.clusterers.outliers.Angiulli.STORMBase\n|+ waitWinFullOption\l+ m_nBothInlierOutlier\l+ m_nOnlyInlier\l+ m_nOnlyOutlier\l# objId\l# windowNodes\l# ISB\l# m_WindowSize\l# m_radius\l# m_k\l# m_QueryFreq\l# FIRST_OBJ_ID\l|+ getStatistics()\l~ GetWindowEnd()\l~ GetWindowStart()\l~ IsWinFull()\l~ CanSearch()\l~ SaveOutlier()\l~ RemoveOutlier()\l~ PrintWindow()\l~ PrintNode()\l# UpdateStatistics()\l# IsNodeIdInWin()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1Angiulli_1_1STORMBase.html"];
  Node17 -> Node18 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node18 [label="{moa.clusterers.outliers.Angiulli.ApproxSTORM\n|+ radiusOption\l+ kOption\l+ queryFreqOption\l+ pOption\l~ safe_inliers\l~ m_FractWindowSize\l~ m_Random\l|+ getObjectInfo()\l+ ApproxSTORM()\l+ Init()\l~ AddSafeInlier()\l~ GetSafeInlier()\l~ IsSafeInlier()\l~ PrintSafeInliers()\l~ RemoveNode()\l~ RemoveSafeInlier()\l~ DeleteExpiredNode()\l~ SearchOutliers()\l~ UpdateNodeType()\l~ UpdateNodeStatistics()\l# ProcessNewStreamObj()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1Angiulli_1_1ApproxSTORM.html"];
  Node17 -> Node19 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node19 [label="{moa.clusterers.outliers.Angiulli.ExactSTORM\n|+ radiusOption\l+ kOption\l+ queryFreqOption\l|+ ExactSTORM()\l+ getObjectInfo()\l+ Init()\l~ RemoveNode()\l~ DeleteExpiredNode()\l~ SearchOutliers()\l~ UpdateNodeType()\l~ UpdateNodeStatistics()\l# ProcessNewStreamObj()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1Angiulli_1_1ExactSTORM.html"];
  Node14 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node20 [label="{moa.clusterers.outliers.AnyOut.AnyOut\n|- FIRST_OBJ_ID\l- minDepth\l- maxDepth\l- anyout\l- idCounter\l- windowSize\l- objects\l- trainingSet\l- trainingCount\l- trainingSetSize\l- truePositive\l- falsePositive\l- totalOutliers\l- outlierClass\l- serialVersionUID\l|+ AnyOut()\l+ resetLearningImpl()\l+ getPurposeString()\l+ getOptions()\l+ getObjectInfo()\l+ getStatistics()\l# Init()\l# ProcessNewStreamObj()\l# IsNodeIdInWin()\l- getWindowEnd()\l- getWindowStart()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1AnyOut_1_1AnyOut.html"];
  Node14 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node21 [label="{moa.clusterers.outliers.MCOD.MCODBase\n|+ bWarning\l+ m_nBothInlierOutlier\l+ m_nOnlyInlier\l+ m_nOnlyOutlier\l# objId\l# windowNodes\l# eventQueue\l# mtreeMC\l# setMC\l# nodesReinsert\l# ISB_PD\l# m_WindowSize\l# m_radius\l# m_k\l# m_theta\l# FIRST_OBJ_ID\l|+ getObjectInfo()\l+ getStatistics()\l+ PrintNodeSet()\l+ PrintMCSet()\l+ PrintNodeVector()\l+ PrintNodeList()\l+ PrintEventQueue()\l+ PrintPD()\l~ GetWindowEnd()\l~ GetWindowStart()\l~ IsWinFull()\l~ GetExpirationTime()\l~ SaveOutlier()\l~ RemoveOutlier()\l~ AddNode()\l~ RemoveNode()\l~ UpdateStatistics()\l~ GetExpiredNode()\l~ AddMicroCluster()\l~ RemoveMicroCluster()\l~ RangeSearchMC()\l~ GetEuclideanDist()\l~ PrintWindow()\l~ PrintNode()\l# IsNodeIdInWin()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1MCOD_1_1MCODBase.html"];
  Node21 -> Node22 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node22 [label="{moa.clusterers.outliers.MCOD.MCOD\n|+ radiusOption\l+ kOption\l|+ MCOD()\l+ Init()\l~ SetNodeType()\l~ AddNeighbor()\l~ ProcessNewNode()\l~ AddToEventQueue()\l~ ProcessEventQueue()\l~ ProcessExpiredNode()\l# ProcessNewStreamObj()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1MCOD_1_1MCOD.html"];
  Node14 -> Node23 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node23 [label="{moa.clusterers.outliers.SimpleCOD.SimpleCODBase\n|+ bWarning\l+ m_nBothInlierOutlier\l+ m_nOnlyInlier\l+ m_nOnlyOutlier\l# objId\l# windowNodes\l# eventQueue\l# ISB\l# m_WindowSize\l# m_radius\l# m_k\l# FIRST_OBJ_ID\l|+ getObjectInfo()\l+ getStatistics()\l+ PrintNodeSet()\l+ PrintNodeVector()\l+ PrintNodeList()\l+ PrintEventQueue()\l+ PrintISB()\l~ GetWindowEnd()\l~ GetWindowStart()\l~ IsWinFull()\l~ GetExpirationTime()\l~ SaveOutlier()\l~ RemoveOutlier()\l~ AddNode()\l~ RemoveNode()\l~ UpdateStatistics()\l~ GetExpiredNode()\l~ GetEuclideanDist()\l~ PrintWindow()\l~ PrintNode()\l# IsNodeIdInWin()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1SimpleCOD_1_1SimpleCODBase.html"];
  Node23 -> Node24 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node24 [label="{moa.clusterers.outliers.SimpleCOD.SimpleCOD\n|+ radiusOption\l+ kOption\l|+ SimpleCOD()\l+ Init()\l~ ProcessNewNode()\l~ AddToEventQueue()\l~ ProcessEventQueue()\l~ ProcessExpiredNode()\l# ProcessNewStreamObj()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1outliers_1_1SimpleCOD_1_1SimpleCOD.html"];
  Node6 -> Node25 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node25 [label="{moa.clusterers.streamkm.StreamKM\n|+ sizeCoresetOption\l+ numClustersOption\l+ widthOption\l+ randomSeedOption\l# clustererRandom\l# centresStreamingCoreset\l# numberInstances\l# dimension\l# length\l# numberOfCentres\l# coresetsize\l# manager\l# initialized\l- THRESHOLD\l|+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ isRandomizable()\l+ getVotesForInstance()\l+ getClusteringResult()\l+ lloydPlusPlus()\l+ targetFunctionValue()\l# getModelMeasurementsImpl()\l- chooseRandomCentres()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1streamkm_1_1StreamKM.html"];
  Node6 -> Node26 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node26 [label="{moa.clusterers.WekaClusteringAlgorithm\n|+ horizonOption\l+ wekaAlgorithmOption\l+ parameterOption\l- clustererClasses\l- instances\l- clusterer\l- serialVersionUID\l|+ WekaClusteringAlgorithm()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getClusteringResult()\l+ getDataset()\l+ getModelDescription()\l+ isRandomizable()\l+ getVotesForInstance()\l+ keepClassLabel()\l+ getPurposeString()\l# getModelMeasurementsImpl()\l- findWekaClustererClasses()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1clusterers_1_1WekaClusteringAlgorithm.html"];
}
