digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.streams.InstanceStream\n||+ getHeader()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ nextInstance()\l+ isRestartable()\l+ restart()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node1 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.streams.ArffFileStream\n|+ arffFileOption\l+ classIndexOption\l# instances\l# fileReader\l# hitEndOfFile\l# lastInstanceRead\l# numInstancesRead\l# fileProgressMonitor\l- serialVersionUID\l|+ getPurposeString()\l+ ArffFileStream()\l+ ArffFileStream()\l+ prepareForUseImpl()\l+ getHeader()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ nextInstance()\l+ isRestartable()\l+ restart()\l+ getDescription()\l# readNextInstanceFromFile()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1ArffFileStream.html",tooltip="Stream reader of ARFF files."];
  Node4 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.streams.generators.multilabel.MultilabelArffFileStream\n|+ numLabelsOption\l- serialVersionUID\l|+ getPurposeString()\l+ MultilabelArffFileStream()\l+ MultilabelArffFileStream()\l+ getHeader()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1multilabel_1_1MultilabelArffFileStream.html",tooltip="Stream reader for ARFF files of multilabel data."];
  Node1 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.streams.CachedInstancesStream\n|# toStream\l# streamPos\l- serialVersionUID\l|+ CachedInstancesStream()\l+ getHeader()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ nextInstance()\l+ isRestartable()\l+ restart()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1CachedInstancesStream.html",tooltip="Stream generator for representing a stream that is cached in memory."];
  Node1 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{moa.streams.clustering.ClusteringStream\n|+ decayHorizonOption\l+ decayThresholdOption\l+ evaluationFrequencyOption\l+ numAttsOption\l|+ getDecayHorizon()\l+ getDecayThreshold()\l+ getEvaluationFrequency()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1clustering_1_1ClusteringStream.html"];
  Node7 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.streams.clustering.FileStream\n|+ arffFileOption\l+ classIndexOption\l+ normalizeOption\l+ removeAttributesOption\l+ keepNonNumericalAttrOption\l~ defaultfile\l# instances\l# fileReader\l# hitEndOfFile\l# lastInstanceRead\l# numInstancesRead\l# fileProgressMonitor\l- removeAttributes\l- filteredDataset\l- valuesMinMaxDiff\l- serialVersionUID\l|+ getPurposeString()\l+ FileStream()\l+ prepareForUseImpl()\l+ getHeader()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ nextInstance()\l+ isRestartable()\l+ restart()\l+ getDescription()\l# readNextInstanceFromFile()\l# readMinMaxDiffValues()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1clustering_1_1FileStream.html"];
  Node7 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.streams.clustering.RandomRBFGeneratorEvents\n|+ modelRandomSeedOption\l+ instanceRandomSeedOption\l+ numClusterOption\l+ numClusterRangeOption\l+ kernelRadiiOption\l+ kernelRadiiRangeOption\l+ densityRangeOption\l+ speedOption\l+ speedRangeOption\l+ noiseLevelOption\l+ noiseInClusterOption\l+ eventFrequencyOption\l+ eventMergeSplitOption\l+ eventDeleteCreateOption\l# instanceRandom\l# streamHeader\l- listeners\l- merge_threshold\l- kernelMovePointFrequency\l- maxDistanceMoveThresholdByStep\l- maxOverlapFitRuns\l- eventFrequencyRange\l- debug\l- kernels\l- numGeneratedInstances\l- numActiveKernels\l- nextEventCounter\l- nextEventChoice\l- clusterIdCounter\l- mergeClusterA\l- mergeClusterB\l- mergeKernelsOverlapping\l- serialVersionUID\l|+ RandomRBFGeneratorEvents()\l+ getHeader()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ isRestartable()\l+ prepareForUseImpl()\l+ restart()\l+ nextInstance()\l+ getGeneratingClusters()\l+ getMicroClustering()\l+ getDescription()\l+ addClusterChangeListener()\l+ removeClusterChangeListener()\l+ getPurposeString()\l+ getParameterString()\l# generateHeader()\l# initKernels()\l# fireClusterChange()\l- eventScheduler()\l- getNextEvent()\l- fadeOut()\l- fadeIn()\l- changeWeight()\l- changeRadius()\l- splitKernel()\l- mergeKernels()\l- getNoisePoint()\l- chooseWeightedElement()\l- normalizeWeights()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1clustering_1_1RandomRBFGeneratorEvents.html"];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.streams.ConceptDriftRealStream\n|+ streamOption\l+ driftstreamOption\l+ alphaOption\l+ positionOption\l+ widthOption\l+ randomSeedOption\l# inputStream\l# driftStream\l# random\l# numberInstanceStream\l# streamHeader\l# inputInstance\l# driftInstance\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ getHeader()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1ConceptDriftRealStream.html",tooltip="Stream generator that adds concept drift to examples in a stream with different classes..."];
  Node1 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node11 [label="{moa.streams.ConceptDriftStream\n|+ streamOption\l+ driftstreamOption\l+ alphaOption\l+ positionOption\l+ widthOption\l+ randomSeedOption\l# inputStream\l# driftStream\l# random\l# numberInstanceStream\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1ConceptDriftStream.html",tooltip="Stream generator that adds concept drift to examples in a stream."];
  Node1 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node12 [label="{moa.streams.FilteredStream\n|+ streamOption\l+ filtersOption\l# filterChain\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1FilteredStream.html",tooltip="Class for representing a stream that is filtered."];
  Node1 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node13 [label="{moa.streams.filters.StreamFilter\n||+ setInputStream()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1streams_1_1filters_1_1StreamFilter.html",tooltip="Interface representing a stream filter."];
  Node13 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node14 [label="{moa.streams.filters.AbstractStreamFilter\n|# inputStream\l|+ setInputStream()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ isRestartable()\l+ restart()\l# restartImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1filters_1_1AbstractStreamFilter.html",tooltip="Abstract Stream Filter."];
  Node14 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node15 [label="{moa.streams.filters.AddNoiseFilter\n|+ randomSeedOption\l+ attNoiseFractionOption\l+ classNoiseFractionOption\l# random\l# attValObservers\l- serialVersionUID\l|+ getPurposeString()\l+ getHeader()\l+ nextInstance()\l+ getDescription()\l# restartImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1filters_1_1AddNoiseFilter.html",tooltip="Filter for adding random noise to examples in a stream."];
  Node14 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node16 [label="{moa.streams.filters.CacheFilter\n|# cache\l# indexCache\l# totalCacheInstances\l# isInitialized\l- serialVersionUID\l|+ getPurposeString()\l+ getHeader()\l+ nextInstance()\l+ hasMoreInstances()\l+ estimatedRemainingInstances()\l+ getDescription()\l# restartImpl()\l# init()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1filters_1_1CacheFilter.html",tooltip="Filter for representing a stream that is cached in memory."];
  Node14 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node17 [label="{moa.streams.filters.ReplacingMissingValuesFilter\n|+ numericReplacementStrategyOption\l+ nominalReplacementStrategyOption\l+ numericalConstantValueOption\l# numAttributes\l# columnsStatistics\l# numberOfSamples\l# lastNominalValues\l# frequencies\l# numericalSelectedStrategy\l# nominalSelectedStrategy\l- serialVersionUID\l|+ getPurposeString()\l+ getHeader()\l+ nextInstance()\l+ getDescription()\l# restartImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1filters_1_1ReplacingMissingValuesFilter.html",tooltip="Replaces the missing values with another value according to the selected strategy..."];
  Node1 -> Node18 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node18 [label="{moa.streams.generators.AgrawalGenerator\n|+ functionOption\l+ instanceRandomSeedOption\l+ peturbFractionOption\l+ balanceClassesOption\l# streamHeader\l# instanceRandom\l# nextClassShouldBeZero\l# classificationFunctions\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l# perturbValue()\l# perturbValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1AgrawalGenerator.html",tooltip="Stream generator for Agrawal dataset."];
  Node1 -> Node19 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node19 [label="{moa.streams.generators.cd.ConceptDriftGenerator\n||+ getEventsList()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1streams_1_1generators_1_1cd_1_1ConceptDriftGenerator.html"];
  Node19 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node20 [label="{moa.streams.generators.cd.AbstractConceptDriftGenerator\n|+ instanceRandomSeedOption\l+ notBinaryStreamOption\l+ numInstancesConceptOption\l# clusterEvents\l# streamHeader\l# instanceRandom\l# period\l# numInstances\l# change\l- serialVersionUID\l|+ getPurposeString()\l+ getEventsList()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ getChange()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l# nextValue()\l- nextbinaryValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1cd_1_1AbstractConceptDriftGenerator.html"];
  Node20 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node21 [label="{moa.streams.generators.cd.AbruptChangeGenerator\n||# nextValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1cd_1_1AbruptChangeGenerator.html"];
  Node20 -> Node22 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node22 [label="{moa.streams.generators.cd.GradualChangeGenerator\n|+ changeDriftOption\l|# nextValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1cd_1_1GradualChangeGenerator.html"];
  Node20 -> Node23 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node23 [label="{moa.streams.generators.cd.NoChangeGenerator\n||# nextValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1cd_1_1NoChangeGenerator.html"];
  Node1 -> Node24 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node24 [label="{moa.streams.generators.HyperplaneGenerator\n|+ instanceRandomSeedOption\l+ numClassesOption\l+ numAttsOption\l+ numDriftAttsOption\l+ magChangeOption\l+ noisePercentageOption\l+ sigmaPercentageOption\l+ numberInstance\l# streamHeader\l# instanceRandom\l# weights\l# sigma\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l# generateHeader()\l- addDrift()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1HyperplaneGenerator.html",tooltip="Stream generator for Hyperplane data stream."];
  Node1 -> Node25 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node25 [label="{moa.streams.generators.LEDGenerator\n|+ instanceRandomSeedOption\l+ noisePercentageOption\l+ suppressIrrelevantAttributesOption\l+ NUM_IRRELEVANT_ATTRIBUTES\l# streamHeader\l# instanceRandom\l# originalInstances\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1LEDGenerator.html",tooltip="Stream generator for the problem of predicting the digit displayed on a 7-segment..."];
  Node25 -> Node26 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node26 [label="{moa.streams.generators.LEDGeneratorDrift\n|+ numberAttributesDriftOption\l# numberAttribute\l- serialVersionUID\l|+ getPurposeString()\l+ nextInstance()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1LEDGeneratorDrift.html",tooltip="Stream generator for the problem of predicting the digit displayed on a 7-segment..."];
  Node1 -> Node27 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node27 [label="{moa.streams.generators.multilabel.MetaMultilabelGenerator\n|+ binaryGeneratorOption\l+ metaRandomSeedOption\l+ numLabelsOption\l+ skewOption\l+ labelCardinalityOption\l+ labelCardinalityVarOption\l+ labelCardinalityRatioOption\l+ labelDependencyChangeRatioOption\l~ queue\l# m_MultilabelInstancesHeader\l# m_BinaryGenerator\l# multilabelStreamTemplate\l# m_MetaRandom\l# m_L\l# m_A\l# priors\l# priors_norm\l# Conditional\l# m_TopCombinations\l- serialVersionUID\l|+ prepareForUseImpl()\l+ restart()\l+ nextInstance()\l+ getHeader()\l+ getPurposeString()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ isRestartable()\l+ getDescription()\l+ main()\l# generateMultilabelHeader()\l# modifyPriorVector()\l# modifyDependencyMatrix()\l# generateConditional()\l- generatePriors()\l- getNextWithBinary()\l- generateSet()\l- joint()\l- generateMLInstance()\l- samplePMF()\l- getTopCombinations()\l- set2vector()\l- vector2set()\l- max()\l- min()\l- getShuffledListToLWithoutK()\l- printMatrix()\l- printVector()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1multilabel_1_1MetaMultilabelGenerator.html",tooltip="Stream generator for multilabel data."];
  Node1 -> Node28 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node28 [label="{moa.streams.generators.RandomRBFGenerator\n|+ modelRandomSeedOption\l+ instanceRandomSeedOption\l+ numClassesOption\l+ numAttsOption\l+ numCentroidsOption\l# streamHeader\l# centroids\l# centroidWeights\l# instanceRandom\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ getHeader()\l+ estimatedRemainingInstances()\l+ hasMoreInstances()\l+ isRestartable()\l+ restart()\l+ nextInstance()\l+ getDescription()\l# generateHeader()\l# generateCentroids()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1RandomRBFGenerator.html",tooltip="Stream generator for a random radial basis function stream."];
  Node28 -> Node29 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node29 [label="{moa.streams.generators.RandomRBFGeneratorDrift\n|+ speedChangeOption\l+ numDriftCentroidsOption\l# speedCentroids\l- serialVersionUID\l|+ getPurposeString()\l+ nextInstance()\l+ getDescription()\l# generateCentroids()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1RandomRBFGeneratorDrift.html",tooltip="Stream generator for a random radial basis function stream with drift."];
  Node1 -> Node30 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node30 [label="{moa.streams.generators.RandomTreeGenerator\n|+ treeRandomSeedOption\l+ instanceRandomSeedOption\l+ numClassesOption\l+ numNominalsOption\l+ numNumericsOption\l+ numValsPerNominalOption\l+ maxTreeDepthOption\l+ firstLeafLevelOption\l+ leafFractionOption\l# treeRoot\l# streamHeader\l# instanceRandom\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ isRestartable()\l+ restart()\l+ getHeader()\l+ hasMoreInstances()\l+ nextInstance()\l+ getDescription()\l# classifyInstance()\l# generateHeader()\l# generateRandomTree()\l# generateRandomTreeNode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1RandomTreeGenerator.html",tooltip="Stream generator for a stream based on a randomly generated tree."];
  Node1 -> Node31 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node31 [label="{moa.streams.generators.SEAGenerator\n|+ functionOption\l+ instanceRandomSeedOption\l+ balanceClassesOption\l+ numInstancesConcept\l+ noisePercentageOption\l# streamHeader\l# instanceRandom\l# nextClassShouldBeZero\l# classificationFunctions\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1SEAGenerator.html",tooltip="Stream generator for SEA concepts functions."];
  Node1 -> Node32 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node32 [label="{moa.streams.generators.STAGGERGenerator\n|+ instanceRandomSeedOption\l+ functionOption\l+ balanceClassesOption\l# streamHeader\l# instanceRandom\l# nextClassShouldBeZero\l# classificationFunctions\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1STAGGERGenerator.html",tooltip="Stream generator for STAGGER Concept functions."];
  Node1 -> Node33 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node33 [label="{moa.streams.generators.WaveformGenerator\n|+ instanceRandomSeedOption\l+ addNoiseOption\l+ NUM_CLASSES\l+ NUM_BASE_ATTRIBUTES\l+ TOTAL_ATTRIBUTES_INCLUDING_NOISE\l# streamHeader\l# instanceRandom\l# hFunctions\l- serialVersionUID\l|+ getPurposeString()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1WaveformGenerator.html",tooltip="Stream generator for the problem of predicting one of three waveform types."];
  Node33 -> Node34 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node34 [label="{moa.streams.generators.WaveformGeneratorDrift\n|+ numberAttributesDriftOption\l# numberAttribute\l- serialVersionUID\l|+ getPurposeString()\l+ nextInstance()\l+ getDescription()\l# prepareForUseImpl()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1generators_1_1WaveformGeneratorDrift.html",tooltip="Stream generator for the problem of predicting one of three waveform types with drift..."];
  Node1 -> Node35 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node35 [label="{moa.streams.MultiFilteredStream\n|+ streamOption\l+ filtersOption\l# filterChain\l- serialVersionUID\l|+ getPurposeString()\l+ prepareForUseImpl()\l+ estimatedRemainingInstances()\l+ getHeader()\l+ hasMoreInstances()\l+ isRestartable()\l+ nextInstance()\l+ restart()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1streams_1_1MultiFilteredStream.html",tooltip="Class for representing a stream that is filtered."];
}
