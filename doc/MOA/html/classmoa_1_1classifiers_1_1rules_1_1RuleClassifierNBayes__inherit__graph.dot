digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{moa.classifiers.rules.RuleClassifierNBayes\n|+ nbThresholdOption\l- serialVersionUID\l|+ getVotesForInstance()\l# firstHitNB()\l# weightedMaxNB()\l# weightedSumNB()\l# normalize()\l# exponential()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node2 [label="{moa.classifiers.rules.RuleClassifier\n|+ PminOption\l+ splitConfidenceOption\l+ tieThresholdOption\l+ anomalyProbabilityThresholdOption\l+ probabilityThresholdOption\l+ anomalyNumInstThresholdOption\l+ gracePeriodOption\l+ predictionFunctionOption\l+ orderedRulesOption\l+ anomalyDetectionOption\l+ Supervised\l+ Unsupervised\l~ minEntropyTemp\l~ cutPointTemp\l~ minEntropyNominalAttrib\l~ symbol\l~ numInstance\l~ numAttributes\l~ numClass\l~ root\l~ pred\l# instance\l# attributeObservers\l# attributeObserversGauss\l# observedClassDistribution\l# saveBestEntropy\l# saveBestEntropyNominalAttrib\l# ruleClassIndex\l# saveBestGlobalEntropy\l# saveBestValGlobalEntropy\l# saveTheBest\l# ruleSet\l# ruleSetAnomalies\l# ruleAnomaliesIndex\l# caseAnomaly\l# ruleAttribAnomalyStatistics\l# ruleSetAnomaliesSupervised\l# ruleAnomaliesIndexSupervised\l# caseAnomalySupervised\l# ruleAttribAnomalyStatisticsSupervised\l- serialVersionUID\l|+ getPurposeString()\l+ getVotesForInstance()\l+ resetLearningImpl()\l+ getWeightSeen()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ printAnomaliesUnsupervised()\l+ printAnomaliesSupervised()\l+ getModelDescriptionNoAnomalyDetection()\l+ isRandomizable()\l+ getCountNominalAttrib()\l+ initializeRuleStatistics()\l+ updateRuleAttribStatistics()\l+ computeAnomalyUnsupervised()\l+ computeAnomalySupervised()\l+ computeMean()\l+ computeSD()\l+ computeProbability()\l+ createRule()\l+ expandeRule()\l+ theBestAttributes()\l+ entropy()\l+ findBestValEntropy()\l+ mainFindBestValEntropy()\l+ findBestValEntropyNominalAtt()\l+ ComputeHoeffdingBound()\l+ checkBestAttrib()\l+ manageMemory()\l# getModelMeasurementsImpl()\l# round()\l# getBestSecondBestEntropy()\l# getRuleMajorityClassIndex()\l# oberversDistribProb()\l# firstHit()\l# weightedMax()\l# weightedSum()\l# newNominalClassObserver()\l# newNumericClassObserver()\l# newNumericClassObserver2()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1rules_1_1RuleClassifier.html",tooltip="This classifier learn ordered and unordered rule set from data stream."];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node3 [label="{moa.classifiers.AbstractClassifier\n|+ randomSeedOption\l+ classifierRandom\l# modelContext\l# trainingWeightSeenByModel\l# randomSeed\l|+ getPurposeString()\l+ AbstractClassifier()\l+ prepareForUseImpl()\l+ setModelContext()\l+ getModelContext()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getModelMeasurements()\l+ getDescription()\l+ getSubClassifiers()\l+ copy()\l+ correctlyClassifies()\l+ getClassNameString()\l+ getClassLabelString()\l+ getAttributeNameString()\l+ getNominalValueString()\l+ getAWTRenderer()\l+ resetLearningImpl()\l+ trainOnInstanceImpl()\l+ getModelDescription()\l+ contextIsCompatible()\l# getModelMeasurementsImpl()\l# modelAttIndexToInstanceAttIndex()\l# modelAttIndexToInstanceAttIndex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1classifiers_1_1AbstractClassifier.html",tooltip="Abstract Classifier."];
  Node4 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node4 [label="{moa.options.AbstractOptionHandler\n|# options\l# classOptionNamesToPreparedObjects\l- serialVersionUID\l|+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ getCLICreationString()\l+ copy()\l# prepareForUseImpl()\l# discoverOptionsViaReflection()\l# prepareClassOptions()\l# getPreparedClassOption()\l# getPreparedClassOption()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1options_1_1AbstractOptionHandler.html",tooltip="Abstract Option Handler."];
  Node5 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node5 [label="{moa.AbstractMOAObject\n||+ copy()\l+ measureByteSize()\l+ toString()\l+ copy()\l+ measureByteSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmoa_1_1AbstractMOAObject.html",tooltip="Abstract MOA Object."];
  Node6 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node6 [label="{moa.MOAObject\n||+ measureByteSize()\l+ copy()\l+ getDescription()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1MOAObject.html",tooltip="Interface implemented by classes in MOA, so that all are serializable, can produce..."];
  Node7 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node7 [label="{Serializable\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node8 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 [label="{moa.options.OptionHandler\n||+ getPurposeString()\l+ getOptions()\l+ prepareForUse()\l+ prepareForUse()\l+ copy()\l+ getCLICreationString()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1options_1_1OptionHandler.html",tooltip="Interface representing an object that handles options or parameters."];
  Node6 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node9 [label="{moa.classifiers.Classifier\n||+ setModelContext()\l+ getModelContext()\l+ isRandomizable()\l+ setRandomSeed()\l+ trainingHasStarted()\l+ trainingWeightSeenByModel()\l+ resetLearning()\l+ trainOnInstance()\l+ getVotesForInstance()\l+ correctlyClassifies()\l+ getModelMeasurements()\l+ getSubClassifiers()\l+ copy()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1classifiers_1_1Classifier.html",tooltip="Classifier interface for incremental classification models."];
  Node6 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node8 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="Helvetica"];
  Node10 [label="{moa.gui.AWTRenderable\n||+ getAWTRenderer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacemoa_1_1gui_1_1AWTRenderable.html",tooltip="Interface representing a component that is renderable."];
}
